document.addEventListener('DOMContentLoaded', function () {
    // Initialize particles.js
    particlesJS('particles-js', {
        particles: {
            number: { value: 60 },
            color: { value: '#7ecfff' },
            shape: { type: 'circle' },
            opacity: { value: 0.3 },
            size: { value: 4 },
            move: { enable: true, speed: 1.5 },
        },
    });

    // Get all form elements
    const calculators = document.getElementById('calculators');
    const mechanicsDropdown = document.getElementById('mechanics-dropdown');
    const thermodynamicsDropdown = document.getElementById('thermodynamics-dropdown');
    const electromagnetismDropdown = document.getElementById('electromagnetism-dropdown');
    const waveOpticsDropdown = document.getElementById('wave-optics-dropdown');
    const modernPhysicsDropdown = document.getElementById('modern-physics-dropdown');
    const fluidPhysicsDropdown = document.getElementById('fluid-physics-dropdown');
    const variableDropdown = document.getElementById('variable-dropdown');
    const form = document.getElementById('calculator-form');
    const input1 = document.getElementById('input1');
    const input2 = document.getElementById('input2');
    const input3 = document.getElementById('input3');
    const label1 = document.querySelector('label[for="input1"]');
    const label2 = document.querySelector('label[for="input2"]');
    const label3 = document.querySelector('label[for="input3"]');
    const resultDiv = document.getElementById('result');
    const formulaDisplay = document.getElementById('formula-display');

    // Function to toggle calculator dropdowns
    function toggleCalculatorDropdowns() {
        const calculatorType = calculators.value;
        
        // Hide all dropdowns first
        mechanicsDropdown.style.display = 'none';
        thermodynamicsDropdown.style.display = 'none';
        electromagnetismDropdown.style.display = 'none';
        waveOpticsDropdown.style.display = 'none';
        modernPhysicsDropdown.style.display = 'none';
        fluidPhysicsDropdown.style.display = 'none';
        
        // Show the selected dropdown
        if (calculatorType === 'mechanics-calculator') {
            mechanicsDropdown.style.display = 'block';
        } else if (calculatorType === 'thermodynamics-calculator') {
            thermodynamicsDropdown.style.display = 'block';
        } else if (calculatorType === 'electromagnetism-calculator') {
            electromagnetismDropdown.style.display = 'block';
        } else if (calculatorType === 'wave-optics-calculator') {
            waveOpticsDropdown.style.display = 'block';
        } else if (calculatorType === 'modern-physics-calculator') {
            modernPhysicsDropdown.style.display = 'block';
        } else if (calculatorType === 'fluid-physics-calculator') {
            fluidPhysicsDropdown.style.display = 'block';
        }
        
        // Reset and hide the variable dropdown initially
        variableDropdown.innerHTML = '';
        variableDropdown.style.display = 'none';
        
        // Update variable dropdown options
        updateVariableDropdown();
    }

    // Function to update variable dropdown based on calculator and type selections
    function updateVariableDropdown() {
        const calculatorType = calculators.value;
        variableDropdown.innerHTML = ''; // Clear existing options
        
        let typeDropdown;
        if (calculatorType === 'mechanics-calculator') {
            typeDropdown = mechanicsDropdown;
        } else if (calculatorType === 'thermodynamics-calculator') {
            typeDropdown = thermodynamicsDropdown;
        } else if (calculatorType === 'electromagnetism-calculator') {
            typeDropdown = electromagnetismDropdown;
        } else if (calculatorType === 'wave-optics-calculator') {
            typeDropdown = waveOpticsDropdown;
        } else if (calculatorType === 'modern-physics-calculator') {
            typeDropdown = modernPhysicsDropdown;
        } else if (calculatorType === 'fluid-physics-calculator') {
            typeDropdown = fluidPhysicsDropdown;
        }
        
        if (!typeDropdown) return;
        
        const type = typeDropdown.value;
        
        // Add options based on calculator type and specific type
        if (calculatorType === 'mechanics-calculator') {
            if (type === 'speed') {
                addOption(variableDropdown, 'speed', 'Speed (v)');
                addOption(variableDropdown, 'distance', 'Distance (d)');
                addOption(variableDropdown, 'time', 'Time (t)');
            } else if (type === 'force') {
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
                addOption(variableDropdown, 'acceleration', 'Acceleration (a)');
            } else if (type === 'work') {
                addOption(variableDropdown, 'work', 'Work (W)');
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'distance', 'Distance (d)');
            } else if (type === 'kinetic') {
                addOption(variableDropdown, 'ke', 'Kinetic Energy (KE)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
            }
        } else if (calculatorType === 'thermodynamics-calculator') {
            if (type === 'idealGas') {
                addOption(variableDropdown, 'pressure', 'Pressure (P)');
                addOption(variableDropdown, 'volume', 'Volume (V)');
                addOption(variableDropdown, 'moles', 'Moles (n)');
                addOption(variableDropdown, 'temperature', 'Temperature (T)');
            } else if (type === 'heatTransfer') {
                addOption(variableDropdown, 'heat', 'Heat (Q)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
                addOption(variableDropdown, 'specificHeat', 'Specific Heat (c)');
                addOption(variableDropdown, 'tempChange', 'Temperature Change (ΔT)');
            } else if (type === 'thermalExpansion') {
                addOption(variableDropdown, 'lengthChange', 'Length Change (ΔL)');
                addOption(variableDropdown, 'coefficient', 'Coefficient of Expansion (α)');
                addOption(variableDropdown, 'initialLength', 'Initial Length (L)');
                addOption(variableDropdown, 'tempChange', 'Temperature Change (ΔT)');
            } else if (type === 'entropy') {
                addOption(variableDropdown, 'entropyChange', 'Entropy Change (ΔS)');
                addOption(variableDropdown, 'heat', 'Heat (Q)');
                addOption(variableDropdown, 'temperature', 'Temperature (T)');
            }
        } else if (calculatorType === 'electromagnetism-calculator') {
            if (type === 'coulomb') {
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'charge1', 'Charge 1 (q₁)');
                addOption(variableDropdown, 'charge2', 'Charge 2 (q₂)');
                addOption(variableDropdown, 'distance', 'Distance (r)');
            } else if (type === 'efield') {
                addOption(variableDropdown, 'electricField', 'Electric Field (E)');
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'charge', 'Charge (q)');
            } else if (type === 'ohms') {
                addOption(variableDropdown, 'voltage', 'Voltage (V)');
                addOption(variableDropdown, 'current', 'Current (I)');
                addOption(variableDropdown, 'resistance', 'Resistance (R)');
            } else if (type === 'power') {
                addOption(variableDropdown, 'power', 'Power (P)');
                addOption(variableDropdown, 'current', 'Current (I)');
                addOption(variableDropdown, 'voltage', 'Voltage (V)');
            } else if (type === 'capacitance') {
                addOption(variableDropdown, 'capacitance', 'Capacitance (C)');
                addOption(variableDropdown, 'charge', 'Charge (Q)');
                addOption(variableDropdown, 'voltage', 'Voltage (V)');
            } else if (type === 'magneticField') {
                addOption(variableDropdown, 'magneticField', 'Magnetic Field (B)');
                addOption(variableDropdown, 'current', 'Current (I)');
                addOption(variableDropdown, 'distance', 'Distance (r)');
            }
        } else if (calculatorType === 'wave-optics-calculator') {
            if (type === 'wavelength') {
                addOption(variableDropdown, 'wavelength', 'Wavelength (λ)');
                addOption(variableDropdown, 'frequency', 'Frequency (f)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
            } else if (type === 'snell') {
                addOption(variableDropdown, 'angle1', 'Angle 1 (θ₁)');
                addOption(variableDropdown, 'angle2', 'Angle 2 (θ₂)');
                addOption(variableDropdown, 'index1', 'Refractive Index 1 (n₁)');
                addOption(variableDropdown, 'index2', 'Refractive Index 2 (n₂)');
            } else if (type === 'lens') {
                addOption(variableDropdown, 'focalLength', 'Focal Length (f)');
                addOption(variableDropdown, 'objectDistance', 'Object Distance (d₀)');
                addOption(variableDropdown, 'imageDistance', 'Image Distance (d₁)');
            } else if (type === 'diffraction') {
                addOption(variableDropdown, 'angle', 'Angle (θ)');
                addOption(variableDropdown, 'order', 'Order (m)');
                addOption(variableDropdown, 'wavelength', 'Wavelength (λ)');
                addOption(variableDropdown, 'spacing', 'Slit Spacing (d)');
            }
        } else if (calculatorType === 'modern-physics-calculator') {
            if (type === 'relativity') {
                addOption(variableDropdown, 'energy', 'Energy (E)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
            } else if (type === 'timeDilation') {
                addOption(variableDropdown, 'dilatedTime', 'Dilated Time (t\')');
                addOption(variableDropdown, 'properTime', 'Proper Time (t)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
            } else if (type === 'lengthContraction') {
                addOption(variableDropdown, 'contractedLength', 'Contracted Length (L\')');
                addOption(variableDropdown, 'properLength', 'Proper Length (L)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
            } else if (type === 'photoelectric') {
                addOption(variableDropdown, 'kineticEnergy', 'Kinetic Energy (Ek)');
                addOption(variableDropdown, 'frequency', 'Frequency (f)');
                addOption(variableDropdown, 'workFunction', 'Work Function (φ)');
            } else if (type === 'bohrModel') {
                addOption(variableDropdown, 'energy', 'Energy (E)');
                addOption(variableDropdown, 'level', 'Quantum Number (n)');
                addOption(variableDropdown, 'radius', 'Radius (r)');
            } else if (type === 'radioactive') {
                addOption(variableDropdown, 'finalAmount', 'Final Amount (N)');
                addOption(variableDropdown, 'initialAmount', 'Initial Amount (N₀)');
                addOption(variableDropdown, 'decayConstant', 'Decay Constant (λ)');
                addOption(variableDropdown, 'time', 'Time (t)');
                addOption(variableDropdown, 'halfLife', 'Half-Life (t½)');
            }
        } else if (calculatorType === 'fluid-physics-calculator') {
            if (type === 'density') {
                addOption(variableDropdown, 'density', 'Density (ρ)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
                addOption(variableDropdown, 'volume', 'Volume (V)');
            } else if (type === 'pressure') {
                addOption(variableDropdown, 'pressure', 'Pressure (P)');
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'area', 'Area (A)');
            } else if (type === 'hydrostatic') {
                addOption(variableDropdown, 'pressure', 'Pressure (P)');
                addOption(variableDropdown, 'density', 'Density (ρ)');
                addOption(variableDropdown, 'height', 'Height (h)');
                addOption(variableDropdown, 'gravity', 'Gravity (g)');
            } else if (type === 'buoyancy') {
                addOption(variableDropdown, 'force', 'Buoyant Force (F_b)');
                addOption(variableDropdown, 'density', 'Fluid Density (ρ)');
                addOption(variableDropdown, 'volume', 'Submerged Volume (V)');
                addOption(variableDropdown, 'gravity', 'Gravity (g)');
            } else if (type === 'bernoulli') {
                addOption(variableDropdown, 'pressure', 'Pressure Difference (ΔP)');
                addOption(variableDropdown, 'height', 'Height Difference (Δh)');
                addOption(variableDropdown, 'velocity', 'Velocity Difference (Δv)');
            } else if (type === 'continuity') {
                addOption(variableDropdown, 'area1', 'Area 1 (A₁)');
                addOption(variableDropdown, 'velocity1', 'Velocity 1 (v₁)');
                addOption(variableDropdown, 'area2', 'Area 2 (A₂)');
                addOption(variableDropdown, 'velocity2', 'Velocity 2 (v₂)');
            } else if (type === 'reynolds') {
                addOption(variableDropdown, 'reynolds', 'Reynolds Number (Re)');
                addOption(variableDropdown, 'density', 'Density (ρ)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
                addOption(variableDropdown, 'length', 'Characteristic Length (L)');
                addOption(variableDropdown, 'viscosity', 'Dynamic Viscosity (μ)');
            } else if (type === 'surfaceTension') {
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'surfaceTension', 'Surface Tension (γ)');
                addOption(variableDropdown, 'length', 'Length (L)');
            }
        }
        
        // Show variable dropdown if options were added
        if (variableDropdown.options.length > 0) {
            variableDropdown.style.display = 'block';
            
            // Update the form based on the first option
            if (variableDropdown.options[0]) {
                variableDropdown.value = variableDropdown.options[0].value;
                updateCalculatorForm();
            }
        }
    }

    // Helper function to add options to dropdown
    function addOption(selectElement, value, text) {
        const option = document.createElement('option');
        option.value = value;
        option.textContent = text;
        selectElement.appendChild(option);
    }

    // Function to update calculator form based on selected variable
    function updateCalculatorForm() {
        // Hide all inputs and labels initially
        label1.style.display = 'none';
        label2.style.display = 'none';
        label3.style.display = 'none';
        input1.style.display = 'none';
        input2.style.display = 'none';
        input3.style.display = 'none';
        
        const calculatorType = calculators.value;
        
        if (calculatorType === 'mechanics-calculator') {
            const type = mechanicsDropdown.value;
            const variable = variableDropdown.value;
            
            // Set formula display
            if (type === 'speed') {
                formulaDisplay.textContent = 'v = d / t';
                
                if (variable === 'speed') {
                    label1.textContent = 'Distance (d, m):';
                    label2.textContent = 'Time (t, s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Speed (v, m/s):';
                    label2.textContent = 'Time (t, s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'time') {
                    label1.textContent = 'Distance (d, m):';
                    label2.textContent = 'Speed (v, m/s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'force') {
                formulaDisplay.textContent = 'F = m × a';
                
                if (variable === 'force') {
                    label1.textContent = 'Mass (m, kg):';
                    label2.textContent = 'Acceleration (a, m/s²):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Acceleration (a, m/s²):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'acceleration') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Mass (m, kg):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'work') {
                formulaDisplay.textContent = 'W = F × d';
                
                if (variable === 'work') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Distance (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'force') {
                    label1.textContent = 'Work (W, J):';
                    label2.textContent = 'Distance (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Work (W, J):';
                    label2.textContent = 'Force (F, N):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'kinetic') {
                formulaDisplay.textContent = 'KE = ½ m v²';
                
                if (variable === 'ke') {
                    label1.textContent = 'Mass (m, kg):';
                    label2.textContent = 'Velocity (v, m/s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Kinetic Energy (KE, J):';
                    label2.textContent = 'Velocity (v, m/s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'velocity') {
                    label1.textContent = 'Kinetic Energy (KE, J):';
                    label2.textContent = 'Mass (m, kg):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            }
        } else if (calculatorType === 'thermodynamics-calculator') {
            const type = thermodynamicsDropdown.value;
            const variable = variableDropdown.value;
            
            if (type === 'idealGas') {
                formulaDisplay.textContent = 'PV = nRT';
                
                if (variable === 'pressure') {
                    label1.textContent = 'Number of Moles (n):';
                    label2.textContent = 'Temperature (T, K):';
                    label3.textContent = 'Volume (V, m³):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'volume') {
                    label1.textContent = 'Number of Moles (n):';
                    label2.textContent = 'Temperature (T, K):';
                    label3.textContent = 'Pressure (P, Pa):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'moles') {
                    label1.textContent = 'Pressure (P, Pa):';
                    label2.textContent = 'Volume (V, m³):';
                    label3.textContent = 'Temperature (T, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'temperature') {
                    label1.textContent = 'Pressure (P, Pa):';
                    label2.textContent = 'Volume (V, m³):';
                    label3.textContent = 'Number of Moles (n):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'heatTransfer') {
                formulaDisplay.textContent = 'Q = mcΔT';
                
                if (variable === 'heat') {
                    label1.textContent = 'Mass (m, kg):';
                    label2.textContent = 'Specific Heat (c, J/kg·K):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Heat (Q, J):';
                    label2.textContent = 'Specific Heat (c, J/kg·K):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'specificHeat') {
                    label1.textContent = 'Heat (Q, J):';
                    label2.textContent = 'Mass (m, kg):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'tempChange') {
                    label1.textContent = 'Heat (Q, J):';
                    label2.textContent = 'Mass (m, kg):';
                    label3.textContent = 'Specific Heat (c, J/kg·K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'thermalExpansion') {
                formulaDisplay.textContent = 'ΔL = αLΔT';
                
                if (variable === 'lengthChange') {
                    label1.textContent = 'Coefficient (α, K⁻¹):';
                    label2.textContent = 'Initial Length (L, m):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'coefficient') {
                    label1.textContent = 'Length Change (ΔL, m):';
                    label2.textContent = 'Initial Length (L, m):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'initialLength') {
                    label1.textContent = 'Length Change (ΔL, m):';
                    label2.textContent = 'Coefficient (α, K⁻¹):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'tempChange') {
                    label1.textContent = 'Length Change (ΔL, m):';
                    label2.textContent = 'Coefficient (α, K⁻¹):';
                    label3.textContent = 'Initial Length (L, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'entropy') {
                formulaDisplay.textContent = 'ΔS = Q/T';
                
                if (variable === 'entropyChange') {
                    label1.textContent = 'Heat (Q, J):';
                    label2.textContent = 'Temperature (T, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'heat') {
                    label1.textContent = 'Entropy Change (ΔS, J/K):';
                    label2.textContent = 'Temperature (T, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'temperature') {
                    label1.textContent = 'Entropy Change (ΔS, J/K):';
                    label2.textContent = 'Heat (Q, J):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            }
        } else if (calculatorType === 'electromagnetism-calculator') {
            const type = electromagnetismDropdown.value;
            const variable = variableDropdown.value;
            
            if (type === 'coulomb') {
                formulaDisplay.textContent = 'F = k·q₁·q₂/r²';
                
                if (variable === 'force') {
                    label1.textContent = 'Charge 1 (q₁, C):';
                    label2.textContent = 'Charge 2 (q₂, C):';
                    label3.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'charge1') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Charge 2 (q₂, C):';
                    label3.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'charge2') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Charge 1 (q₁, C):';
                    label3.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Charge 1 (q₁, C):';
                    label3.textContent = 'Charge 2 (q₂, C):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'efield') {
                formulaDisplay.textContent = 'E = F/q';
                
                if (variable === 'electricField') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Charge (q, C):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'force') {
                    label1.textContent = 'Electric Field (E, N/C):';
                    label2.textContent = 'Charge (q, C):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'charge') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Electric Field (E, N/C):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'ohms') {
                formulaDisplay.textContent = 'V = IR';
                
                if (variable === 'voltage') {
                    label1.textContent = 'Current (I, A):';
                    label2.textContent = 'Resistance (R, Ω):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'current') {
                    label1.textContent = 'Voltage (V, V):';
                    label2.textContent = 'Resistance (R, Ω):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'resistance') {
                    label1.textContent = 'Voltage (V, V):';
                    label2.textContent = 'Current (I, A):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'power') {
                formulaDisplay.textContent = 'P = IV';
                
                if (variable === 'power') {
                    label1.textContent = 'Current (I, A):';
                    label2.textContent = 'Voltage (V, V):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'current') {
                    label1.textContent = 'Power (P, W):';
                    label2.textContent = 'Voltage (V, V):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'voltage') {
                    label1.textContent = 'Power (P, W):';
                    label2.textContent = 'Current (I, A):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'capacitance') {
                formulaDisplay.textContent = 'C = Q/V';
                
                if (variable === 'capacitance') {
                    label1.textContent = 'Charge (Q, C):';
                    label2.textContent = 'Voltage (V, V):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'charge') {
                    label1.textContent = 'Capacitance (C, F):';
                    label2.textContent = 'Voltage (V, V):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'voltage') {
                    label1.textContent = 'Charge (Q, C):';
                    label2.textContent = 'Capacitance (C, F):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'magneticField') {
                formulaDisplay.textContent = 'B = μ₀I/2πr';
                
                if (variable === 'magneticField') {
                    label1.textContent = 'Current (I, A):';
                    label2.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'current') {
                    label1.textContent = 'Magnetic Field (B, T):';
                    label2.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Magnetic Field (B, T):';
                    label2.textContent = 'Current (I, A):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            }
        } else if (calculatorType === 'wave-optics-calculator') {
            const type = waveOpticsDropdown.value;
            const variable = variableDropdown.value;
            
            if (type === 'wavelength') {
                formulaDisplay.textContent = 'λ = v / f';
                
                if (variable === 'wavelength') {
                    label1.textContent = 'Velocity (v, m/s):';
                    label2.textContent = 'Frequency (f, Hz):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'frequency') {
                    label1.textContent = 'Velocity (v, m/s):';
                    label2.textContent = 'Wavelength (λ, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'velocity') {
                    label1.textContent = 'Frequency (f, Hz):';
                    label2.textContent = 'Wavelength (λ, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'diffraction') {
                formulaDisplay.textContent = 'sin θ = mλ/d';
                
                if (variable === 'angle') {
                    label1.textContent = 'Order (m):';
                    label2.textContent = 'Wavelength (λ, m):';
                    label3.textContent = 'Slit Spacing (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'order') {
                    label1.textContent = 'Angle (θ, degrees):';
                    label2.textContent = 'Wavelength (λ, m):';
                    label3.textContent = 'Slit Spacing (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'wavelength') {
                    label1.textContent = 'Angle (θ, degrees):';
                    label2.textContent = 'Order (m):';
                    label3.textContent = 'Slit Spacing (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'spacing') {
                    label1.textContent = 'Angle (θ, degrees):';
                    label2.textContent = 'Order (m):';
                    label3.textContent = 'Wavelength (λ, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'snell') {
                formulaDisplay.textContent = 'n₁sinθ₁ = n₂sinθ₂';
                
                if (variable === 'angle1') {
                    label1.textContent = 'Refractive Index 1 (n₁):';
                    label2.textContent = 'Refractive Index 2 (n₂):';
                    label3.textContent = 'Angle 2 (θ₂, degrees):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'angle2') {
                    label1.textContent = 'Refractive Index 1 (n₁):';
                    label2.textContent = 'Refractive Index 2 (n₂):';
                    label3.textContent = 'Angle 1 (θ₁, degrees):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'index1') {
                    label1.textContent = 'Refractive Index 2 (n₂):';
                    label2.textContent = 'Angle 1 (θ₁, degrees):';
                    label3.textContent = 'Angle 2 (θ₂, degrees):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'index2') {
                    label1.textContent = 'Refractive Index 1 (n₁):';
                    label2.textContent = 'Angle 1 (θ₁, degrees):';
                    label3.textContent = 'Angle 2 (θ₂, degrees):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'lens') {
                formulaDisplay.textContent = '1/f = 1/d₀ + 1/d₁';
                
                if (variable === 'focalLength') {
                    label1.textContent = 'Object Distance (d₀, m):';
                    label2.textContent = 'Image Distance (d₁, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'objectDistance') {
                    label1.textContent = 'Focal Length (f, m):';
                    label2.textContent = 'Image Distance (d₁, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'imageDistance') {
                    label1.textContent = 'Focal Length (f, m):';
                    label2.textContent = 'Object Distance (d₀, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            }
        } else if (calculatorType === 'modern-physics-calculator') {
            const type = modernPhysicsDropdown.value;
            const variable = variableDropdown.value;
            
            if (type === 'relativity') {
                formulaDisplay.textContent = 'E = mc²';
                
                if (variable === 'energy') {
                    label1.textContent = 'Mass (m, kg):';
                    label1.style.display = 'block';
                    input1.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Energy (E, J):';
                    label1.style.display = 'block';
                    input1.style.display = 'block';
                }
            } else if (type === 'photoelectric') {
                formulaDisplay.textContent = 'E = hf - φ';
                
                if (variable === 'kineticEnergy') {
                    label1.textContent = 'Frequency (f, Hz):';
                    label2.textContent = 'Work Function (φ, eV):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'frequency') {
                    label1.textContent = 'Kinetic Energy (E_k, eV):';
                    label2.textContent = 'Work Function (φ, eV):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'workFunction') {
                    label1.textContent = 'Kinetic Energy (E_k, eV):';
                    label2.textContent = 'Frequency (f, Hz):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'bohrModel') {
                formulaDisplay.textContent = 'E = -13.6/n² eV';
                
                if (variable === 'energy') {
                    label1.textContent = 'Quantum Number (n):';
                    label1.style.display = 'block';
                    input1.style.display = 'block';
                } else if (variable === 'level') {
                    label1.textContent = 'Energy (E, eV):';
                    label1.style.display = 'block';
                    input1.style.display = 'block';
                } else if (variable === 'radius') {
                    label1.textContent = 'Quantum Number (n):';
                    label1.style.display = 'block';
                    input1.style.display = 'block';
                }
            } else if (type === 'radioactive') {
                formulaDisplay.textContent = 'N = N₀e^(-λt)';
                
                if (variable === 'finalAmount') {
                    label1.textContent = 'Initial Amount (N₀):';
                    label2.textContent = 'Decay Constant (λ, s⁻¹):';
                    label3.textContent = 'Time (t, s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'initialAmount') {
                    label1.textContent = 'Final Amount (N):';
                    label2.textContent = 'Decay Constant (λ, s⁻¹):';
                    label3.textContent = 'Time (t, s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'decayConstant') {
                    label1.textContent = 'Final Amount (N):';
                    label2.textContent = 'Initial Amount (N₀):';
                    label3.textContent = 'Time (t, s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'time') {
                    label1.textContent = 'Final Amount (N):';
                    label2.textContent = 'Initial Amount (N₀):';
                    label3.textContent = 'Decay Constant (λ, s⁻¹):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'halfLife') {
                    label1.textContent = 'Decay Constant (λ, s⁻¹):';
                    label1.style.display = 'block';
                    input1.style.display = 'block';
                }
            }
        } else if (calculatorType === 'fluid-physics-calculator') {
            const type = fluidPhysicsDropdown.value;
            const variable = variableDropdown.value;
            
            if (type === 'density') {
                formulaDisplay.textContent = 'ρ = m/V';
                
                if (variable === 'density') {
                    label1.textContent = 'Mass (m, kg):';
                    label2.textContent = 'Volume (V, m³):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Density (ρ, kg/m³):';
                    label2.textContent = 'Volume (V, m³):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'volume') {
                    label1.textContent = 'Mass (m, kg):';
                    label2.textContent = 'Density (ρ, kg/m³):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'pressure') {
                formulaDisplay.textContent = 'P = F/A';
                
                if (variable === 'pressure') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Area (A, m²):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'force') {
                    label1.textContent = 'Pressure (P, Pa):';
                    label2.textContent = 'Area (A, m²):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'area') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Pressure (P, Pa):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'hydrostatic') {
                formulaDisplay.textContent = 'P = ρgh';
                
                if (variable === 'pressure') {
                    label1.textContent = 'Density (ρ, kg/m³):';
                    label2.textContent = 'Gravity (g, m/s²):';
                    label3.textContent = 'Height (h, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                    input2.value = '9.81'; // Default gravity
                } else if (variable === 'density') {
                    label1.textContent = 'Pressure (P, Pa):';
                    label2.textContent = 'Gravity (g, m/s²):';
                    label3.textContent = 'Height (h, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                    input2.value = '9.81'; // Default gravity
                } else if (variable === 'height') {
                    label1.textContent = 'Pressure (P, Pa):';
                    label2.textContent = 'Density (ρ, kg/m³):';
                    label3.textContent = 'Gravity (g, m/s²):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                    input3.value = '9.81'; // Default gravity
                } else if (variable === 'gravity') {
                    label1.textContent = 'Pressure (P, Pa):';
                    label2.textContent = 'Density (ρ, kg/m³):';
                    label3.textContent = 'Height (h, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'blockdocument.addEventListener('DOMContentLoaded', function () {
    // Initialize particles.js
    particlesJS('particles-js', {
        particles: {
            number: { value: 60 },
            color: { value: '#7ecfff' },
            shape: { type: 'circle' },
            opacity: { value: 0.3 },
            size: { value: 4 },
            move: { enable: true, speed: 1.5 },
        },
    });

    // Get all form elements
    const calculators = document.getElementById('calculators');
    const mechanicsDropdown = document.getElementById('mechanics-dropdown');
    const thermodynamicsDropdown = document.getElementById('thermodynamics-dropdown');
    const electromagnetismDropdown = document.getElementById('electromagnetism-dropdown');
    const waveOpticsDropdown = document.getElementById('wave-optics-dropdown');
    const modernPhysicsDropdown = document.getElementById('modern-physics-dropdown');
    const fluidPhysicsDropdown = document.getElementById('fluid-physics-dropdown');
    const variableDropdown = document.getElementById('variable-dropdown');
    const form = document.getElementById('calculator-form');
    const input1 = document.getElementById('input1');
    const input2 = document.getElementById('input2');
    const input3 = document.getElementById('input3');
    const label1 = document.querySelector('label[for="input1"]');
    const label2 = document.querySelector('label[for="input2"]');
    const label3 = document.querySelector('label[for="input3"]');
    const resultDiv = document.getElementById('result');
    const formulaDisplay = document.getElementById('formula-display');

    // Function to toggle calculator dropdowns
    function toggleCalculatorDropdowns() {
        const calculatorType = calculators.value;
        
        // Hide all dropdowns first
        mechanicsDropdown.style.display = 'none';
        thermodynamicsDropdown.style.display = 'none';
        electromagnetismDropdown.style.display = 'none';
        waveOpticsDropdown.style.display = 'none';
        modernPhysicsDropdown.style.display = 'none';
        fluidPhysicsDropdown.style.display = 'none';
        
        // Show the selected dropdown
        if (calculatorType === 'mechanics-calculator') {
            mechanicsDropdown.style.display = 'block';
        } else if (calculatorType === 'thermodynamics-calculator') {
            thermodynamicsDropdown.style.display = 'block';
        } else if (calculatorType === 'electromagnetism-calculator') {
            electromagnetismDropdown.style.display = 'block';
        } else if (calculatorType === 'wave-optics-calculator') {
            waveOpticsDropdown.style.display = 'block';
        } else if (calculatorType === 'modern-physics-calculator') {
            modernPhysicsDropdown.style.display = 'block';
        } else if (calculatorType === 'fluid-physics-calculator') {
            fluidPhysicsDropdown.style.display = 'block';
        }
        
        // Reset and hide the variable dropdown initially
        variableDropdown.innerHTML = '';
        variableDropdown.style.display = 'none';
        
        // Update variable dropdown options
        updateVariableDropdown();
    }

    // Function to update variable dropdown based on calculator and type selections
    function updateVariableDropdown() {
        const calculatorType = calculators.value;
        variableDropdown.innerHTML = ''; // Clear existing options
        
        let typeDropdown;
        if (calculatorType === 'mechanics-calculator') {
            typeDropdown = mechanicsDropdown;
        } else if (calculatorType === 'thermodynamics-calculator') {
            typeDropdown = thermodynamicsDropdown;
        } else if (calculatorType === 'electromagnetism-calculator') {
            typeDropdown = electromagnetismDropdown;
        } else if (calculatorType === 'wave-optics-calculator') {
            typeDropdown = waveOpticsDropdown;
        } else if (calculatorType === 'modern-physics-calculator') {
            typeDropdown = modernPhysicsDropdown;
        } else if (calculatorType === 'fluid-physics-calculator') {
            typeDropdown = fluidPhysicsDropdown;
        }
        
        if (!typeDropdown) return;
        
        const type = typeDropdown.value;
        
        // Add options based on calculator type and specific type
        if (calculatorType === 'mechanics-calculator') {
            if (type === 'speed') {
                addOption(variableDropdown, 'speed', 'Speed (v)');
                addOption(variableDropdown, 'distance', 'Distance (d)');
                addOption(variableDropdown, 'time', 'Time (t)');
            } else if (type === 'force') {
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
                addOption(variableDropdown, 'acceleration', 'Acceleration (a)');
            } else if (type === 'work') {
                addOption(variableDropdown, 'work', 'Work (W)');
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'distance', 'Distance (d)');
            } else if (type === 'kinetic') {
                addOption(variableDropdown, 'ke', 'Kinetic Energy (KE)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
            }
        } else if (calculatorType === 'thermodynamics-calculator') {
            if (type === 'idealGas') {
                addOption(variableDropdown, 'pressure', 'Pressure (P)');
                addOption(variableDropdown, 'volume', 'Volume (V)');
                addOption(variableDropdown, 'moles', 'Moles (n)');
                addOption(variableDropdown, 'temperature', 'Temperature (T)');
            } else if (type === 'heatTransfer') {
                addOption(variableDropdown, 'heat', 'Heat (Q)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
                addOption(variableDropdown, 'specificHeat', 'Specific Heat (c)');
                addOption(variableDropdown, 'tempChange', 'Temperature Change (ΔT)');
            } else if (type === 'thermalExpansion') {
                addOption(variableDropdown, 'lengthChange', 'Length Change (ΔL)');
                addOption(variableDropdown, 'coefficient', 'Coefficient of Expansion (α)');
                addOption(variableDropdown, 'initialLength', 'Initial Length (L)');
                addOption(variableDropdown, 'tempChange', 'Temperature Change (ΔT)');
            } else if (type === 'entropy') {
                addOption(variableDropdown, 'entropyChange', 'Entropy Change (ΔS)');
                addOption(variableDropdown, 'heat', 'Heat (Q)');
                addOption(variableDropdown, 'temperature', 'Temperature (T)');
            }
        } else if (calculatorType === 'electromagnetism-calculator') {
            if (type === 'coulomb') {
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'charge1', 'Charge 1 (q₁)');
                addOption(variableDropdown, 'charge2', 'Charge 2 (q₂)');
                addOption(variableDropdown, 'distance', 'Distance (r)');
            } else if (type === 'efield') {
                addOption(variableDropdown, 'electricField', 'Electric Field (E)');
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'charge', 'Charge (q)');
            } else if (type === 'ohms') {
                addOption(variableDropdown, 'voltage', 'Voltage (V)');
                addOption(variableDropdown, 'current', 'Current (I)');
                addOption(variableDropdown, 'resistance', 'Resistance (R)');
            } else if (type === 'power') {
                addOption(variableDropdown, 'power', 'Power (P)');
                addOption(variableDropdown, 'current', 'Current (I)');
                addOption(variableDropdown, 'voltage', 'Voltage (V)');
            } else if (type === 'capacitance') {
                addOption(variableDropdown, 'capacitance', 'Capacitance (C)');
                addOption(variableDropdown, 'charge', 'Charge (Q)');
                addOption(variableDropdown, 'voltage', 'Voltage (V)');
            } else if (type === 'magneticField') {
                addOption(variableDropdown, 'magneticField', 'Magnetic Field (B)');
                addOption(variableDropdown, 'current', 'Current (I)');
                addOption(variableDropdown, 'distance', 'Distance (r)');
            }
        } else if (calculatorType === 'wave-optics-calculator') {
            if (type === 'wavelength') {
                addOption(variableDropdown, 'wavelength', 'Wavelength (λ)');
                addOption(variableDropdown, 'frequency', 'Frequency (f)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
            } else if (type === 'snell') {
                addOption(variableDropdown, 'angle1', 'Angle 1 (θ₁)');
                addOption(variableDropdown, 'angle2', 'Angle 2 (θ₂)');
                addOption(variableDropdown, 'index1', 'Refractive Index 1 (n₁)');
                addOption(variableDropdown, 'index2', 'Refractive Index 2 (n₂)');
            } else if (type === 'lens') {
                addOption(variableDropdown, 'focalLength', 'Focal Length (f)');
                addOption(variableDropdown, 'objectDistance', 'Object Distance (d₀)');
                addOption(variableDropdown, 'imageDistance', 'Image Distance (d₁)');
            } else if (type === 'diffraction') {
                addOption(variableDropdown, 'angle', 'Angle (θ)');
                addOption(variableDropdown, 'order', 'Order (m)');
                addOption(variableDropdown, 'wavelength', 'Wavelength (λ)');
                addOption(variableDropdown, 'spacing', 'Slit Spacing (d)');
            }
        } else if (calculatorType === 'modern-physics-calculator') {
            if (type === 'relativity') {
                addOption(variableDropdown, 'energy', 'Energy (E)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
            } else if (type === 'timeDilation') {
                addOption(variableDropdown, 'dilatedTime', 'Dilated Time (t\')');
                addOption(variableDropdown, 'properTime', 'Proper Time (t)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
            } else if (type === 'lengthContraction') {
                addOption(variableDropdown, 'contractedLength', 'Contracted Length (L\')');
                addOption(variableDropdown, 'properLength', 'Proper Length (L)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
            } else if (type === 'photoelectric') {
                addOption(variableDropdown, 'kineticEnergy', 'Kinetic Energy (Ek)');
                addOption(variableDropdown, 'frequency', 'Frequency (f)');
                addOption(variableDropdown, 'workFunction', 'Work Function (φ)');
            } else if (type === 'bohrModel') {
                addOption(variableDropdown, 'energy', 'Energy (E)');
                addOption(variableDropdown, 'level', 'Quantum Number (n)');
                addOption(variableDropdown, 'radius', 'Radius (r)');
            } else if (type === 'radioactive') {
                addOption(variableDropdown, 'finalAmount', 'Final Amount (N)');
                addOption(variableDropdown, 'initialAmount', 'Initial Amount (N₀)');
                addOption(variableDropdown, 'decayConstant', 'Decay Constant (λ)');
                addOption(variableDropdown, 'time', 'Time (t)');
                addOption(variableDropdown, 'halfLife', 'Half-Life (t½)');
            }
        } else if (calculatorType === 'fluid-physics-calculator') {
            if (type === 'density') {
                addOption(variableDropdown, 'density', 'Density (ρ)');
                addOption(variableDropdown, 'mass', 'Mass (m)');
                addOption(variableDropdown, 'volume', 'Volume (V)');
            } else if (type === 'pressure') {
                addOption(variableDropdown, 'pressure', 'Pressure (P)');
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'area', 'Area (A)');
            } else if (type === 'hydrostatic') {
                addOption(variableDropdown, 'pressure', 'Pressure (P)');
                addOption(variableDropdown, 'density', 'Density (ρ)');
                addOption(variableDropdown, 'height', 'Height (h)');
                addOption(variableDropdown, 'gravity', 'Gravity (g)');
            } else if (type === 'buoyancy') {
                addOption(variableDropdown, 'force', 'Buoyant Force (F_b)');
                addOption(variableDropdown, 'density', 'Fluid Density (ρ)');
                addOption(variableDropdown, 'volume', 'Submerged Volume (V)');
                addOption(variableDropdown, 'gravity', 'Gravity (g)');
            } else if (type === 'bernoulli') {
                addOption(variableDropdown, 'pressure', 'Pressure Difference (ΔP)');
                addOption(variableDropdown, 'height', 'Height Difference (Δh)');
                addOption(variableDropdown, 'velocity', 'Velocity Difference (Δv)');
            } else if (type === 'continuity') {
                addOption(variableDropdown, 'area1', 'Area 1 (A₁)');
                addOption(variableDropdown, 'velocity1', 'Velocity 1 (v₁)');
                addOption(variableDropdown, 'area2', 'Area 2 (A₂)');
                addOption(variableDropdown, 'velocity2', 'Velocity 2 (v₂)');
            } else if (type === 'reynolds') {
                addOption(variableDropdown, 'reynolds', 'Reynolds Number (Re)');
                addOption(variableDropdown, 'density', 'Density (ρ)');
                addOption(variableDropdown, 'velocity', 'Velocity (v)');
                addOption(variableDropdown, 'length', 'Characteristic Length (L)');
                addOption(variableDropdown, 'viscosity', 'Dynamic Viscosity (μ)');
            } else if (type === 'surfaceTension') {
                addOption(variableDropdown, 'force', 'Force (F)');
                addOption(variableDropdown, 'surfaceTension', 'Surface Tension (γ)');
                addOption(variableDropdown, 'length', 'Length (L)');
            }
        }
        
        // Show variable dropdown if options were added
        if (variableDropdown.options.length > 0) {
            variableDropdown.style.display = 'block';
            
            // Update the form based on the first option
            if (variableDropdown.options[0]) {
                variableDropdown.value = variableDropdown.options[0].value;
                updateCalculatorForm();
            }
        }
    }

    // Helper function to add options to dropdown
    function addOption(selectElement, value, text) {
        const option = document.createElement('option');
        option.value = value;
        option.textContent = text;
        selectElement.appendChild(option);
    }

    // Function to update calculator form based on selected variable
    function updateCalculatorForm() {
        // Hide all inputs and labels initially
        label1.style.display = 'none';
        label2.style.display = 'none';
        label3.style.display = 'none';
        input1.style.display = 'none';
        input2.style.display = 'none';
        input3.style.display = 'none';
        
        const calculatorType = calculators.value;
        
        if (calculatorType === 'mechanics-calculator') {
            const type = mechanicsDropdown.value;
            const variable = variableDropdown.value;
            
            // Set formula display
            if (type === 'speed') {
                formulaDisplay.textContent = 'v = d / t';
                
                if (variable === 'speed') {
                    label1.textContent = 'Distance (d, m):';
                    label2.textContent = 'Time (t, s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Speed (v, m/s):';
                    label2.textContent = 'Time (t, s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'time') {
                    label1.textContent = 'Distance (d, m):';
                    label2.textContent = 'Speed (v, m/s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'force') {
                formulaDisplay.textContent = 'F = m × a';
                
                if (variable === 'force') {
                    label1.textContent = 'Mass (m, kg):';
                    label2.textContent = 'Acceleration (a, m/s²):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Acceleration (a, m/s²):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'acceleration') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Mass (m, kg):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'work') {
                formulaDisplay.textContent = 'W = F × d';
                
                if (variable === 'work') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Distance (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'force') {
                    label1.textContent = 'Work (W, J):';
                    label2.textContent = 'Distance (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Work (W, J):';
                    label2.textContent = 'Force (F, N):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'kinetic') {
                formulaDisplay.textContent = 'KE = ½ m v²';
                
                if (variable === 'ke') {
                    label1.textContent = 'Mass (m, kg):';
                    label2.textContent = 'Velocity (v, m/s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Kinetic Energy (KE, J):';
                    label2.textContent = 'Velocity (v, m/s):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'velocity') {
                    label1.textContent = 'Kinetic Energy (KE, J):';
                    label2.textContent = 'Mass (m, kg):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            }
        } else if (calculatorType === 'thermodynamics-calculator') {
            const type = thermodynamicsDropdown.value;
            const variable = variableDropdown.value;
            
            if (type === 'idealGas') {
                formulaDisplay.textContent = 'PV = nRT';
                
                if (variable === 'pressure') {
                    label1.textContent = 'Number of Moles (n):';
                    label2.textContent = 'Temperature (T, K):';
                    label3.textContent = 'Volume (V, m³):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'volume') {
                    label1.textContent = 'Number of Moles (n):';
                    label2.textContent = 'Temperature (T, K):';
                    label3.textContent = 'Pressure (P, Pa):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'moles') {
                    label1.textContent = 'Pressure (P, Pa):';
                    label2.textContent = 'Volume (V, m³):';
                    label3.textContent = 'Temperature (T, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'temperature') {
                    label1.textContent = 'Pressure (P, Pa):';
                    label2.textContent = 'Volume (V, m³):';
                    label3.textContent = 'Number of Moles (n):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'heatTransfer') {
                formulaDisplay.textContent = 'Q = mcΔT';
                
                if (variable === 'heat') {
                    label1.textContent = 'Mass (m, kg):';
                    label2.textContent = 'Specific Heat (c, J/kg·K):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Heat (Q, J):';
                    label2.textContent = 'Specific Heat (c, J/kg·K):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'specificHeat') {
                    label1.textContent = 'Heat (Q, J):';
                    label2.textContent = 'Mass (m, kg):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'tempChange') {
                    label1.textContent = 'Heat (Q, J):';
                    label2.textContent = 'Mass (m, kg):';
                    label3.textContent = 'Specific Heat (c, J/kg·K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'thermalExpansion') {
                formulaDisplay.textContent = 'ΔL = αLΔT';
                
                if (variable === 'lengthChange') {
                    label1.textContent = 'Coefficient (α, K⁻¹):';
                    label2.textContent = 'Initial Length (L, m):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'coefficient') {
                    label1.textContent = 'Length Change (ΔL, m):';
                    label2.textContent = 'Initial Length (L, m):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'initialLength') {
                    label1.textContent = 'Length Change (ΔL, m):';
                    label2.textContent = 'Coefficient (α, K⁻¹):';
                    label3.textContent = 'Temperature Change (ΔT, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'tempChange') {
                    label1.textContent = 'Length Change (ΔL, m):';
                    label2.textContent = 'Coefficient (α, K⁻¹):';
                    label3.textContent = 'Initial Length (L, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'entropy') {
                formulaDisplay.textContent = 'ΔS = Q/T';
                
                if (variable === 'entropyChange') {
                    label1.textContent = 'Heat (Q, J):';
                    label2.textContent = 'Temperature (T, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'heat') {
                    label1.textContent = 'Entropy Change (ΔS, J/K):';
                    label2.textContent = 'Temperature (T, K):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'temperature') {
                    label1.textContent = 'Entropy Change (ΔS, J/K):';
                    label2.textContent = 'Heat (Q, J):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            }
        } else if (calculatorType === 'electromagnetism-calculator') {
            const type = electromagnetismDropdown.value;
            const variable = variableDropdown.value;
            
            if (type === 'coulomb') {
                formulaDisplay.textContent = 'F = k·q₁·q₂/r²';
                
                if (variable === 'force') {
                    label1.textContent = 'Charge 1 (q₁, C):';
                    label2.textContent = 'Charge 2 (q₂, C):';
                    label3.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'charge1') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Charge 2 (q₂, C):';
                    label3.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'charge2') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Charge 1 (q₁, C):';
                    label3.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Charge 1 (q₁, C):';
                    label3.textContent = 'Charge 2 (q₂, C):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'efield') {
                formulaDisplay.textContent = 'E = F/q';
                
                if (variable === 'electricField') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Charge (q, C):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'force') {
                    label1.textContent = 'Electric Field (E, N/C):';
                    label2.textContent = 'Charge (q, C):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'charge') {
                    label1.textContent = 'Force (F, N):';
                    label2.textContent = 'Electric Field (E, N/C):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'ohms') {
                formulaDisplay.textContent = 'V = IR';
                
                if (variable === 'voltage') {
                    label1.textContent = 'Current (I, A):';
                    label2.textContent = 'Resistance (R, Ω):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'current') {
                    label1.textContent = 'Voltage (V, V):';
                    label2.textContent = 'Resistance (R, Ω):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'resistance') {
                    label1.textContent = 'Voltage (V, V):';
                    label2.textContent = 'Current (I, A):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'power') {
                formulaDisplay.textContent = 'P = IV';
                
                if (variable === 'power') {
                    label1.textContent = 'Current (I, A):';
                    label2.textContent = 'Voltage (V, V):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'current') {
                    label1.textContent = 'Power (P, W):';
                    label2.textContent = 'Voltage (V, V):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'voltage') {
                    label1.textContent = 'Power (P, W):';
                    label2.textContent = 'Current (I, A):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'capacitance') {
                formulaDisplay.textContent = 'C = Q/V';
                
                if (variable === 'capacitance') {
                    label1.textContent = 'Charge (Q, C):';
                    label2.textContent = 'Voltage (V, V):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'charge') {
                    label1.textContent = 'Capacitance (C, F):';
                    label2.textContent = 'Voltage (V, V):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'voltage') {
                    label1.textContent = 'Charge (Q, C):';
                    label2.textContent = 'Capacitance (C, F):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'magneticField') {
                formulaDisplay.textContent = 'B = μ₀I/2πr';
                
                if (variable === 'magneticField') {
                    label1.textContent = 'Current (I, A):';
                    label2.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'current') {
                    label1.textContent = 'Magnetic Field (B, T):';
                    label2.textContent = 'Distance (r, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Magnetic Field (B, T):';
                    label2.textContent = 'Current (I, A):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            }
        } else if (calculatorType === 'wave-optics-calculator') {
            const type = waveOpticsDropdown.value;
            const variable = variableDropdown.value;
            
            if (type === 'wavelength') {
                formulaDisplay.textContent = 'λ = v / f';
                
                if (variable === 'wavelength') {
                    label1.textContent = 'Velocity (v, m/s):';
                    label2.textContent = 'Frequency (f, Hz):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'frequency') {
                    label1.textContent = 'Velocity (v, m/s):';
                    label2.textContent = 'Wavelength (λ, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'velocity') {
                    label1.textContent = 'Frequency (f, Hz):';
                    label2.textContent = 'Wavelength (λ, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            } else if (type === 'diffraction') {
                formulaDisplay.textContent = 'sin θ = mλ/d';
                
                if (variable === 'angle') {
                    label1.textContent = 'Order (m):';
                    label2.textContent = 'Wavelength (λ, m):';
                    label3.textContent = 'Slit Spacing (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'order') {
                    label1.textContent = 'Angle (θ, degrees):';
                    label2.textContent = 'Wavelength (λ, m):';
                    label3.textContent = 'Slit Spacing (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'wavelength') {
                    label1.textContent = 'Angle (θ, degrees):';
                    label2.textContent = 'Order (m):';
                    label3.textContent = 'Slit Spacing (d, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'spacing') {
                    label1.textContent = 'Angle (θ, degrees):';
                    label2.textContent = 'Order (m):';
                    label3.textContent = 'Wavelength (λ, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'snell') {
                formulaDisplay.textContent = 'n₁sinθ₁ = n₂sinθ₂';
                
                if (variable === 'angle1') {
                    label1.textContent = 'Refractive Index 1 (n₁):';
                    label2.textContent = 'Refractive Index 2 (n₂):';
                    label3.textContent = 'Angle 2 (θ₂, degrees):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'angle2') {
                    label1.textContent = 'Refractive Index 1 (n₁):';
                    label2.textContent = 'Refractive Index 2 (n₂):';
                    label3.textContent = 'Angle 1 (θ₁, degrees):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'index1') {
                    label1.textContent = 'Refractive Index 2 (n₂):';
                    label2.textContent = 'Angle 1 (θ₁, degrees):';
                    label3.textContent = 'Angle 2 (θ₂, degrees):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'index2') {
                    label1.textContent = 'Refractive Index 1 (n₁):';
                    label2.textContent = 'Angle 1 (θ₁, degrees):';
                    label3.textContent = 'Angle 2 (θ₂, degrees):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    label3.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'lens') {
                formulaDisplay.textContent = '1/f = 1/d₀ + 1/d₁';
                    
                if (variable === 'focalLength') {
                    label1.textContent = 'Object Distance (d₀, m):';
                    label2.textContent = 'Image Distance (d₁, m):';
                    label1.style.display = 'block';                        
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'objectDistance') {
                    label1.textContent = 'Focal Length (f, m):';
                    label2.textContent = 'Image Distance (d₁, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                } else if (variable === 'imageDistance') {
                    label1.textContent = 'Focal Length (f, m):';
                    label2.textContent = 'Object Distance (d₀, m):';
                    label1.style.display = 'block';
                    label2.style.display = 'block';
                    input1.style.display = 'block';
                    input2.style.display = 'block';
                }
            }
        }
                    
        // Handle form submission
        form.addEventListener('submit', function (e) {
            e.preventDefault();        
            const calculatorType = calculators.value;
            let result = null;
                    
            // Get input values
            const val1 = parseFloat(input1.value);
            const val2 = parseFloat(input2.value);
            const val3 = parseFloat(input3.value);
                    
            // Simple calculator for demonstration
            if (calculatorType === 'mechanics-calculator') {
                const type = mechanicsDropdown.value;
                const variable = variableDropdown.value;
                        
                if (type === 'speed') {
                    if (variable === 'speed') {
                        result = val1 / val2; // d/t
                    } else if (variable === 'distance') {
                        result = val1 * val2; // v*t
                    } else if (variable === 'time') {
                        result = val1 / val2; // d/v
                    }
                } else if (type === 'force') {
                    if (variable === 'force') {
                        result = val1 * val2; // m*a
                    } else if (variable === 'mass') {
                        result = val1 / val2; // F/a
                    } else if (variable === 'acceleration') {
                        result = val1 / val2; // F/m
                    }
                } else if (type === 'work') {
                    if (variable === 'work') {
                        result = val1 * val2; // F*d
                    } else if (variable === 'force') {
                        result = val1 / val2; // W/d
                    } else if (variable === 'distance') {
                        result = val1 / val2; // W/F
                    }
                } else if (type === 'kinetic') {
                    if (variable === 'ke') {
                        result = 0.5 * val1 * val2 * val2; // 0.5*m*v^2
                    } else if (variable === 'mass') {
                        result = 2 * val1 / (val2 * val2); // 2*KE/v^2
                    } else if (variable === 'velocity') {
                        result = Math.sqrt(2 * val1 / val2); // sqrt(2*KE/m)
                    }
                }
            } else if (calculatorType === 'thermodynamics-calculator') {
                const type = thermodynamicsDropdown.value;
                const variable = variableDropdown.value;
                
                if (type === 'idealGas') {
                    const R = 8.314; // Gas constant in J/(mol·K)
                    if (variable === 'pressure') {
                        result = val1 * R * val2 / val3; // nRT/V
                    } else if (variable === 'volume') {
                        result = val1 * R * val2 / val3; // nRT/P
                    } else if (variable === 'moles') {
                        result = val1 * val2 / (R * val3); // PV/RT
                    } else if (variable === 'temperature') {
                        result = val1 * val2 / (val3 * R); // PV/nR
                    }
                } else if (type === 'heatTransfer') {
                    if (variable === 'heat') {
                        result = val1 * val2 * val3; // m*c*ΔT
                    } else if (variable === 'mass') {
                        result = val1 / (val2 * val3); // Q/c/ΔT
                    } else if (variable === 'specificHeat') {
                        result = val1 / (val2 * val3); // Q/m/ΔT
                    } else if (variable === 'tempChange') {
                        result = val1 / (val2 * val3); // Q/m/c
                    }
                } else if (type === 'thermalExpansion') {
                    if (variable === 'lengthChange') {
                        result = val1 * val2 * val3; // α*L*ΔT
                    } else if (variable === 'coefficient') {
                        result = val1 / (val2 * val3); // ΔL/L/ΔT
                    } else if (variable === 'initialLength') {
                        result = val1 / (val2 * val3); // ΔL/α/ΔT
                    } else if (variable === 'tempChange') {
                        result = val1 / (val2 * val3); // ΔL/α/L
                    }
                } else if (type === 'entropy') {
                    if (variable === 'entropyChange') {
                        result = val1 / val2; // Q/T
                    } else if (variable === 'heat') {
                        result = val1 * val2; // ΔS*T
                    } else if (variable === 'temperature') {
                        result = val1 / val2; // Q/ΔS
                    }
                }
            } else if (calculatorType === 'electromagnetism-calculator') {
                const type = electromagnetismDropdown.value;
                const variable = variableDropdown.value;
                    
                if (type === 'coulomb') {
                    const k = 8.99e9; // Coulomb's constant
                    if (variable === 'force') {
                        result = k * val1 * val2 / (val3 * val3); // k*q1*q2/r²
                    } else if (variable === 'charge1') {
                        result = val1 * val3 * val3 / (k * val2); // F*r²/k/q2
                    } else if (variable === 'charge2') {
                        result = val1 * val3 * val3 / (k * val2); // F*r²/k/q1
                    } else if (variable === 'distance') {
                        result = Math.sqrt(k * val2 * val3 / val1); // sqrt(k*q1*q2/F)
                    }
                } else if (type === 'efield') {
                    if (variable === 'electricField') {
                        result = val1 / val2; // F/q
                    } else if (variable === 'force') {
                        result = val1 * val2; // E*q
                    } else if (variable === 'charge') {
                        result = val1 / val2; // F/E
                    }
                } else if (type === 'ohms') {
                    if (variable === 'voltage') {
                        result = val1 * val2; // I*R
                    } else if (variable === 'current') {
                        result = val1 / val2; // V/R
                    } else if (variable === 'resistance') {
                        result = val1 / val2; // V/I
                    }
                } else if (type === 'power') {
                    if (variable === 'power') {
                        result = val1 * val2; // I*V
                    } else if (variable === 'current') {
                        result = val1 / val2; // P/V
                    } else if (variable === 'voltage') {
                        result = val1 / val2; // P/I
                    }
                } else if (type === 'capacitance') {
                    if (variable === 'capacitance') {
                        result = val1 / val2; // Q/V
                    } else if (variable === 'charge') {
                        result = val1 * val2; // C*V
                    } else if (variable === 'voltage') {
                        result = val1 / val2; // Q/C
                    }
                } else if (type === 'magneticField') {
                    const mu0 = 4 * Math.PI * 1e-7; // Magnetic permeability
                    if (variable === 'magneticField') {
                        result = mu0 * val1 / (2 * Math.PI * val2); // μ₀I/2πr
                    } else if (variable === 'current') {
                        result = 2 * Math.PI * val1 * val2 / mu0; // 2πrB/μ₀
                    } else if (variable === 'distance') {
                        result = mu0 * val2 / (2 * Math.PI * val1); // μ₀I/2πB
                    }
                }
            } else if (calculatorType === 'wave-optics-calculator') {
                const type = waveOpticsDropdown.value;
                const variable = variableDropdown.value;
                
                if (type === 'wavelength') {
                    if (variable === 'wavelength') {
                        result = val1 / val2; // v/f
                    } else if (variable === 'frequency') {
                        result = val1 / val2; // v/λ
                    } else if (variable === 'velocity') {
                        result = val1 * val2; // f*λ
                    }
                } else if (type === 'diffraction') {
                    const degToRad = Math.PI / 180;
                    if (variable === 'angle') {
                        result = Math.asin(val1 * val2 / val3) / degToRad; // asin(m*λ/d) in degrees
                    } else if (variable === 'order') {
                        result = (Math.sin(val1 * degToRad) * val3) / val2; // sin(θ)*d/λ
                    } else if (variable === 'wavelength') {
                        result = (Math.sin(val1 * degToRad) * val3) / val2; // sin(θ)*d/m
                    } else if (variable === 'spacing') {
                        result = (val2 * val3) / Math.sin(val1 * degToRad); // m*λ/sin(θ)
                    }
                } else if (type === 'snell') {
                    const degToRad = Math.PI / 180;
                    if (variable === 'angle1') {
                        result = Math.asin(val2 * Math.sin(val3 * degToRad) / val1) / degToRad;
                    } else if (variable === 'angle2') {
                        result = Math.asin(val1 * Math.sin(val3 * degToRad) / val2) / degToRad;
                    } else if (variable === 'index1') {
                        result = val1 * Math.sin(val3 * degToRad) / Math.sin(val2 * degToRad);
                    } else if (variable === 'index2') {
                        result = val1 * Math.sin(val2 * degToRad) / Math.sin(val3 * degToRad);
                    }
                } else if (type === 'lens') {
                    if (variable === 'focalLength') {
                        result = 1 / (1/val1 + 1/val2); // 1/(1/d₀ + 1/d₁)
                    } else if (variable === 'objectDistance') {
                        result = 1 / (1/val1 - 1/val2); // 1/(1/f - 1/d₁)
                    } else if (variable === 'imageDistance') {
                        result = 1 / (1/val1 - 1/val2); // 1/(1/f - 1/d₀)
                    }
                }
            } else if (calculatorType === 'modern-physics-calculator') {
                const type = modernPhysicsDropdown.value;
                const variable = variableDropdown.value;                
                if (type === 'relativity') {
                    const c = 299792458; // Speed of light in m/s
                        
                    if (variable === 'energy') {
                        result = val1 * c * c; // m*c^2
                    } else if (variable === 'mass') {
                        result = val1 / (c * c); // E/c^2
                    }
                } else if (type === 'photoelectric') {
                    const h = 6.626e-34; // Planck's constant
                    const eV = 1.602e-19; // electron volt in joules
                    
                    if (variable === 'kineticEnergy') {
                        result = h * val1 / eV - val2; // (h*f)/eV - φ
                    } else if (variable === 'frequency') {
                        result = (val1 + val2) * eV / h; // (E_k + φ)*eV/h
                    } else if (variable === 'workFunction') {
                        result = h * val2 / eV - val1; // (h*f)/eV - E_k
                    }
                } else if (type === 'bohrModel') {
                    if (variable === 'energy') {
                        result = -13.6 / (val1 * val1); // -13.6/n²
                    } else if (variable === 'level') {
                        result = Math.sqrt(-13.6 / val1); // sqrt(-13.6/E)
                    } else if (variable === 'radius') {
                        const a0 = 5.29e-11; // Bohr radius in meters
                        result = val1 * val1 * a0; // n²*a0
                    }
                } else if (type === 'radioactive') {
                    if (variable === 'finalAmount') {
                        result = val1 * Math.exp(-val2 * val3); // N₀*e^(-λt)
                    } else if (variable === 'initialAmount') {
                        result = val1 / Math.exp(-val2 * val3); // N/e^(-λt)
                    } else if (variable === 'decayConstant') {
                        result = -Math.log(val1 / val2) / val3; // -ln(N/N₀)/t
                    } else if (variable === 'time') {
                        result = -Math.log(val1 / val2) / val3; // -ln(N/N₀)/λ
                    } else if (variable === 'halfLife') {
                        result = Math.log(2) / val1; // ln(2)/λ
                    }
                }
            } else if (calculatorType === 'fluid-physics-calculator') {
                const type = fluidPhysicsDropdown.value;
                const variable = variableDropdown.value;
                
                if (type === 'density') {
                    if (variable === 'density') {
                        result = val1 / val2; // m//
                    } else if (variable === 'mass') {
                        result = val1 * val2; // ρ*V
                    } else if (variable === 'volume') {
                        result = val1 / val2; // m/ρ
                    }
                } else if (type === 'pressure') {
                    if (variable === 'pressure') {
                        result = val1 / val2; // F/A
                    } else if (variable === 'force') {
                        result = val1 * val2; // P*A
                    } else if (variable === 'area') {
                        result = val1 / val2; // F/P
                    }
                } else if (type === 'hydrostatic') {
                    if (variable === 'pressure') {
                        result = val1 * val2 * val3; // ρ*g*h
                    } else if (variable === 'density') {
                        result = val1 / (val2 * val3); // P/(g*h)
                    } else if (variable === 'height') {
                        result = val1 / (val2 * val3); // P/(ρ*g)
                    } else if (variable === 'gravity') {
                        result = val1 / (val2 * val3); // P/(ρ*h)
                    }
                } else if (type === 'buoyancy') {
                    if (variable === 'force') {
                        result = val1 * val2 * val3; // ρ*g*V
                    } else if (variable === 'density') {
                        result = val1 / (val2 * val3); // F/(g*V)
                    } else if (variable === 'volume') {
                        result = val1 / (val2 * val3); // F/(ρ*g)
                    } else if (variable === 'gravity') {
                        result = val1 / (val2 * val3); // F/(ρ*V)
                    }
                } else if (type === 'bernoulli') {
                    const rho = 1000; // Default density for fluids (water)
                    if (variable === 'pressure') {
                        result = val3 * rho * val2 * val2 / 2 + val3 * rho * 9.81 * val1; // ρv²/2 + ρgh
                    } else if (variable === 'height') {
                        result = (val1 - val3 * rho * val2 * val2 / 2) / (val3 * rho * 9.81); // (P - ρv²/2)/(ρg)
                    } else if (variable === 'velocity') {
                        result = Math.sqrt(2 * (val1 - val3 * rho * 9.81 * val2) / (val3 * rho)); // sqrt(2(P - ρgh)/ρ)
                    }
                } else if (type === 'continuity') {
                    if (variable === 'area1') {
                        result = val1 * val3 / val2; // A₂v₂/v₁
                    } else if (variable === 'velocity1') {
                        result = val2 * val3 / val1; // A₂v₂/A₁
                    } else if (variable === 'area2') {
                        result = val1 * val2 / val3; // A₁v₁/v₂
                    } else if (variable === 'velocity2') {
                        result = val1 * val2 / val3; // A₁v₁/A₂
                    }
                } else if (type === 'reynolds') {
                    if (variable === 'reynolds') {
                        result = val1 * val2 * val3 / val4; // ρvL/μ
                    } else if (variable === 'density') {
                        result = val1 * val4 / (val2 * val3); // Re·μ/(v·L)
                    } else if (variable === 'velocity') {
                        result = val1 * val4 / (val2 * val3); // Re·μ/(ρ·L)
                    } else if (variable === 'length') {
                        result = val1 * val4 / (val2 * val3); // Re·μ/(ρ·v)
                    } else if (variable === 'viscosity') {
                        result = val2 * val3 * val4 / val1; // ρvL/Re
                    }
                } else if (type === 'surfaceTension') {
                    if (variable === 'force') {
                        result = val1 * val2; // γ·L
                    } else if (variable === 'surfaceTension') {
                        result = val1 / val2; // F/L
                    } else if (variable === 'length') {
                        result = val1 / val2; // F/γ
                    }
                }
            }
                    
            // Display the result
            if (result !== null) {
                resultDiv.textContent = 'Result: ' + result.toFixed(4);
            } else {
                resultDiv.textContent = 'Calculation not implemented for this combination.';
            }
        });
                    
        // Add event listeners
        calculators.addEventListener('change', toggleCalculatorDropdowns);
        mechanicsDropdown.addEventListener('change', updateVariableDropdown);
        thermodynamicsDropdown.addEventListener('change', updateVariableDropdown);
        electromagnetismDropdown.addEventListener('change', updateVariableDropdown);
        waveOpticsDropdown.addEventListener('change', updateVariableDropdown);
        modernPhysicsDropdown.addEventListener('change', updateVariableDropdown);
        fluidPhysicsDropdown.addEventListener('change', updateVariableDropdown);
        variableDropdown.addEventListener('change', updateCalculatorForm);
            
        // Initialize the dropdowns
        toggleCalculatorDropdowns();
        updateVariableDropdown();
            
        // Initialize AOS
        AOS.init();
    });