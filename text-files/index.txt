document.addEventListener('DOMContentLoaded', function () {
    // Initialize particle.js
    particlesJS('particles-js', {
        particles: {
            number: { value: 60 },
            color: { value: '#7ecfff' },
            shape: { type: 'circle' },
            opacity: { value: 0.3 },
            size: { value: 4 },
            move: { enable: true, speed: 1.5 },
        },
    });

    // Get all form elements
    const calculators = document.getElementById('calculators');
    const mechanicsDropdown = document.getElementById('mechanics-dropdown');
    const thermodynamicsDropdown = document.getElementById(
        'thermodynamics-dropdown'
    );
    const electromagnetismDropdown = document.getElementById(
        'electromagnetism-dropdown'
    );
    const variableDropdown = document.getElementById('variable-dropdown');
    const form = document.getElementById('calculator-form');
    const input1 = document.getElementById('input1');
    const input2 = document.getElementById('input2');
    const input3 = document.getElementById('input3');
    const label1 = form.querySelector('label[for="input1"]');
    const label2 = form.querySelector('label[for="input2"]');
    const label3 = form.querySelector('label[for="input3"]');
    const resultDiv = document.getElementById('result');

    // Toggle calculator dropdowns
    function toggleCalculatorDropdowns() {
        // Hide all dropdowns first
        mechanicsDropdown.style.display = 'none';
        thermodynamicsDropdown.style.display = 'none';
        electromagnetismDropdown.style.display = 'none';

        // Show the appropriate dropdown
        if (calculators.value === 'mechanics-calculator') {
            mechanicsDropdown.style.display = 'block';
        } else if (calculators.value === 'thermodynamics-calculator') {
            thermodynamicsDropdown.style.display = 'block';
        } else if (calculators.value === 'electromagnetism-calculator') {
            electromagnetismDropdown.style.display = 'block';
        }

        // Update variable dropdown
        updateVariableDropdown();
    }

    // Mechanics calculator types and their variables
    const mechanicsVariables = {
        speed: [
            { value: 'speed', label: 'Speed (v)' },
            { value: 'distance', label: 'Distance (d)' },
            { value: 'time', label: 'Time (t)' },
        ],
        force: [
            { value: 'force', label: 'Force (F)' },
            { value: 'mass', label: 'Mass (m)' },
            { value: 'acceleration', label: 'Acceleration (a)' },
        ],
        work: [
            { value: 'work', label: 'Work (W)' },
            { value: 'force', label: 'Force (F)' },
            { value: 'distance', label: 'Distance (d)' },
        ],
        kinetic: [
            { value: 'ke', label: 'Kinetic Energy (KE)' },
            { value: 'mass', label: 'Mass (m)' },
            { value: 'velocity', label: 'Velocity (v)' },
        ],
    };

    // Thermodynamics calculator types and their variables
    const thermodynamicsVariables = {
        idealGas: [
            { value: 'pressure', label: 'Pressure (P)' },
            { value: 'volume', label: 'Volume (V)' },
            { value: 'moles', label: 'Number of moles (n)' },
            { value: 'temperature', label: 'Temperature (T)' },
        ],
        heatTransfer: [
            { value: 'heat', label: 'Heat (Q)' },
            { value: 'mass', label: 'Mass (m)' },
            { value: 'specificHeat', label: 'Specific Heat (c)' },
            { value: 'tempChange', label: 'Temperature Change (ΔT)' },
        ],
        thermalExpansion: [
            { value: 'finalLength', label: 'Final Length (Lf)' },
            { value: 'initialLength', label: 'Initial Length (Li)' },
            { value: 'coefficient', label: 'Coefficient of Expansion (α)' },
            { value: 'tempChange', label: 'Temperature Change (ΔT)' },
        ],
        entropy: [
            { value: 'entropyChange', label: 'Entropy Change (ΔS)' },
            { value: 'heatTransfer', label: 'Heat Transfer (Q)' },
            { value: 'temperature', label: 'Temperature (T)' },
        ],
    };
    
    // Electromagnetism calculator types and their variables
    const electromagnetismVariables = {
        coulomb: [
            { value: 'force', label: 'Force (F)' },
            { value: 'charge1', label: 'Charge 1 (q₁)' },
            { value: 'charge2', label: 'Charge 2 (q₂)' },
            { value: 'distance', label: 'Distance (r)' },
        ],
        efield: [
            { value: 'field', label: 'Electric Field (E)' },
            { value: 'force', label: 'Force (F)' },
            { value: 'charge', label: 'Charge (q)' },
        ],
        ohms: [
            { value: 'voltage', label: 'Voltage (V)' },
            { value: 'current', label: 'Current (I)' },
            { value: 'resistance', label: 'Resistance (R)' },
        ],
        power: [
            { value: 'power', label: 'Power (P)' },
            { value: 'voltage', label: 'Voltage (V)' },
            { value: 'current', label: 'Current (I)' },
            { value: 'resistance', label: 'Resistance (R)' },
        ],
        capacitance: [
            { value: 'capacitance', label: 'Capacitance (C)' },
            { value: 'charge', label: 'Charge (Q)' },
            { value: 'voltage', label: 'Voltage (V)' },
        ],
        magneticField: [
            { value: 'field', label: 'Magnetic Field (B)' },
            { value: 'current', label: 'Current (I)' },
            { value: 'distance', label: 'Distance (r)' },
        ],
    };

    function updateVariableDropdown() {
        // Clear previous variables
        variableDropdown.innerHTML = '';
        variableDropdown.style.display = 'none';

        if (calculators.value === 'mechanics-calculator') {
            const type = mechanicsDropdown.value;
            if (mechanicsVariables[type]) {
                variableDropdown.style.display = 'block';
                mechanicsVariables[type].forEach((opt) => {
                    const option = document.createElement('option');
                    option.value = opt.value;
                    option.textContent = opt.label;
                    variableDropdown.appendChild(option);
                });
            }
        } else if (calculators.value === 'thermodynamics-calculator') {
            const type = thermodynamicsDropdown.value;
            if (thermodynamicsVariables[type]) {
                variableDropdown.style.display = 'block';
                thermodynamicsVariables[type].forEach((opt) => {
                    const option = document.createElement('option');
                    option.value = opt.value;
                    option.textContent = opt.label;
                    variableDropdown.appendChild(option);
                });
            }
        } else if (calculators.value === 'electromagnetism-calculator') {
            const type = electromagnetismDropdown.value;
            if (electromagnetismVariables[type]) {
                variableDropdown.style.display = 'block';
                electromagnetismVariables[type].forEach((opt) => {
                    const option = document.createElement('option');
                    option.value = opt.value;
                    option.textContent = opt.label;
                    variableDropdown.appendChild(option);
                });
            }
        }

        // Update calculator form
        updateCalculatorForm();
    }

    function calculateElectromagnetismResult(val1, val2, val3) {
        const type = electromagnetismDropdown.value;
        const variable = variableDropdown.value;
        let result = '';

        // Coulomb constant (N·m²/C²)
        const k = 8.99e9;
        // Magnetic constant μ₀ (T·m/A)
        const mu0 = 4 * Math.PI * 1e-7;

        if (type === 'coulomb') {
            if (variable === 'force') {
                if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3) && val3 !== 0) {
                    result = `Force = ${((k * val1 * val2) / (val3 * val3)).toExponential(
                        2
                    )} N`;
                } else {
                    result = 'Please enter valid numbers (r ≠ 0).';
                }
            } else if (variable === 'charge1') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0 && !isNaN(val3) && val3 !== 0) {
                    result = `Charge 1 = ${(
                        (val1 * val3 * val3) /
                        (k * val2)
                    ).toExponential(2)} C`;
                } else {
                    result = 'Please enter valid numbers (q₂, r ≠ 0).';
                }
            } else if (variable === 'charge2') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0 && !isNaN(val3) && val3 !== 0) {
                    result = `Charge 2 = ${(
                        (val1 * val3 * val3) /
                        (k * val2)
                    ).toExponential(2)} C`;
                } else {
                    result = 'Please enter valid numbers (q₁, r ≠ 0).';
                }
            } else if (variable === 'distance') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0 && val1 !== 0) {
                    result = `Distance = ${Math.sqrt((k * val2) / val1).toFixed(
                        2
                    )} m`;
                } else {
                    result = 'Please enter valid numbers (F, q₁·q₂ ≠ 0).';
                }
            }
        } else if (type === 'efield') {
            if (variable === 'field') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Electric Field = ${(val1 / val2).toFixed(2)} N/C`;
                } else {
                    result = 'Please enter valid numbers (q ≠ 0).';
                }
            } else if (variable === 'force') {
                if (!isNaN(val1) && !isNaN(val2)) {
                    result = `Force = ${(val1 * val2).toFixed(2)} N`;
                } else {
                    result = 'Please enter valid numbers.';
                }
            } else if (variable === 'charge') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Charge = ${(val1 / val2).toExponential(2)} C`;
                } else {
                    result = 'Please enter valid numbers (E ≠ 0).';
                }
            }
        } else if (type === 'ohms') {
            if (variable === 'voltage') {
                if (!isNaN(val1) && !isNaN(val2)) {
                    result = `Voltage = ${(val1 * val2).toFixed(2)} V`;
                } else {
                    result = 'Please enter valid numbers.';
                }
            } else if (variable === 'current') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Current = ${(val1 / val2).toFixed(2)} A`;
                } else {
                    result = 'Please enter valid numbers (R ≠ 0).';
                }
            } else if (variable === 'resistance') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Resistance = ${(val1 / val2).toFixed(2)} Ω`;
                } else {
                    result = 'Please enter valid numbers (I ≠ 0).';
                }
            }
        } else if (type === 'power') {
            if (variable === 'power') {
                if (!isNaN(val1) && !isNaN(val2)) {
                    result = `Power = ${(val1 * val2).toFixed(2)} W`;
                } else {
                    result = 'Please enter valid numbers.';
                }
            } else if (variable === 'voltage') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Voltage = ${(val1 / val2).toFixed(2)} V`;
                } else {
                    result = 'Please enter valid numbers (I ≠ 0).';
                }
            } else if (variable === 'current') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Current = ${(val1 / val2).toFixed(2)} A`;
                } else {
                    result = 'Please enter valid numbers (V ≠ 0).';
                }
            } else if (variable === 'resistance') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Resistance = ${(val1 / (val2 * val2)).toFixed(2)} Ω`;
                } else {
                    result = 'Please enter valid numbers (I ≠ 0).';
                }
            }
        } else if (type === 'capacitance') {
            if (variable === 'capacitance') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Capacitance = ${(val1 / val2).toExponential(2)} F`;
                } else {
                    result = 'Please enter valid numbers (V ≠ 0).';
                }
            } else if (variable === 'charge') {
                if (!isNaN(val1) && !isNaN(val2)) {
                    result = `Charge = ${(val1 * val2).toExponential(2)} C`;
                } else {
                    result = 'Please enter valid numbers.';
                }
            } else if (variable === 'voltage') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Voltage = ${(val1 / val2).toFixed(2)} V`;
                } else {
                    result = 'Please enter valid numbers (C ≠ 0).';
                }
            }
        } else if (type === 'magneticField') {
            if (variable === 'field') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Magnetic Field = ${(
                        (mu0 * val1) /
                        (2 * Math.PI * val2)
                    ).toExponential(2)} T`;
                } else {
                    result = 'Please enter valid numbers (r ≠ 0).';
                }
            } else if (variable === 'current') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Current = ${(
                        (2 * Math.PI * val2 * val1) /
                        mu0
                    ).toFixed(2)} A`;
                } else {
                    result = 'Please enter valid numbers (r ≠ 0).';
                }
            } else if (variable === 'distance') {
                if (!isNaN(val1) && !isNaN(val2) && val1 !== 0 && val2 !== 0) {
                    result = `Distance = ${(
                        (mu0 * val2) /
                        (2 * Math.PI * val1)
                    ).toFixed(2)} m`;
                } else {
                    result = 'Please enter valid numbers (B, I ≠ 0).';
                }
            }
        }

        return result;
    }

    function updateCalculatorForm() {
        // Clear previous inputs
        input1.value = '';
        input2.value = '';
        input3.value = '';
        resultDiv.textContent = '';

        // Default: hide all
        label1.style.display = 'none';
        label2.style.display = 'none';
        label3.style.display = 'none';
        input1.style.display = 'none';
        input2.style.display = 'none';
        input3.style.display = 'none';

        // Get calculator type
        const calculatorType = calculators.value;
        document
            .querySelector('.calculator-container')
            .setAttribute('data-active-calculator', calculatorType);

        if (calculatorType === 'mechanics-calculator') {
            const type = mechanicsDropdown.value;
            const variable = variableDropdown.value;

            if (type === 'speed') {
                if (variable === 'speed' || variable === '') {
                    label1.textContent = 'Distance (meters):';
                    label2.textContent = 'Time (seconds):';
                } else if (variable === 'distance') {
                    label1.textContent = 'Speed (m/s):';
                    label2.textContent = 'Time (seconds):';
                } else if (variable === 'time') {
                    label1.textContent = 'Distance (meters):';
                    label2.textContent = 'Speed (m/s):';
                }
            } else if (type === 'force') {
                if (variable === 'force' || variable === '') {
                    label1.textContent = 'Mass (kg):';
                    label2.textContent = 'Acceleration (m/s²):';
                } else if (variable === 'mass') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Acceleration (m/s²):';
                } else if (variable === 'acceleration') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Mass (kg):';
                }
            } else if (type === 'work') {
                if (variable === 'work' || variable === '') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Distance (meters):';
                } else if (variable === 'force') {
                    label1.textContent = 'Work (J):';
                    label2.textContent = 'Distance (meters):';
                } else if (variable === 'distance') {
                    label1.textContent = 'Work (J):';
                    label2.textContent = 'Force (N):';
                }
            } else if (type === 'kinetic') {
                if (variable === 'ke' || variable === '') {
                    label1.textContent = 'Mass (kg):';
                    label2.textContent = 'Velocity (m/s):';
                } else if (variable === 'mass') {
                    label1.textContent = 'Kinetic Energy (J):';
                    label2.textContent = 'Velocity (m/s):';
                } else if (variable === 'velocity') {
                    label1.textContent = 'Kinetic Energy (J):';
                    label2.textContent = 'Mass (kg):';
                }
            }
        } else if (calculatorType === 'thermodynamics-calculator') {
            const type = thermodynamicsDropdown.value;
            const variable = variableDropdown.value;

            if (type === 'idealGas') {
                if (variable === 'pressure') {
                    label1.textContent = 'Number of moles (n):';
                    label2.textContent = 'Temperature (K):';
                    label3.textContent = 'Volume (m³):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'volume') {
                    label1.textContent = 'Number of moles (n):';
                    label2.textContent = 'Temperature (K):';
                    label3.textContent = 'Pressure (Pa):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'moles') {
                    label1.textContent = 'Pressure (Pa):';
                    label2.textContent = 'Volume (m³):';
                    label3.textContent = 'Temperature (K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'temperature') {
                    label1.textContent = 'Pressure (Pa):';
                    label2.textContent = 'Volume (m³):';
                    label3.textContent = 'Number of moles (n):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'heatTransfer') {
                if (variable === 'heat') {
                    label1.textContent = 'Mass (kg):';
                    label2.textContent = 'Specific Heat (J/kg·K):';
                    label3.textContent = 'Temperature Change (K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Heat (J):';
                    label2.textContent = 'Temperature Change (K):';
                    label3.textContent = 'Specific Heat (J/kg·K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'specificHeat') {
                    label1.textContent = 'Heat (J):';
                    label2.textContent = 'Mass (kg):';
                    label3.textContent = 'Temperature Change (K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'tempChange') {
                    label1.textContent = 'Heat (J):';
                    label2.textContent = 'Mass (kg):';
                    label3.textContent = 'Specific Heat (J/kg·K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'thermalExpansion') {
                if (variable === 'finalLength') {
                    label1.textContent = 'Initial Length (m):';
                    label2.textContent = 'Temperature Change (K):';
                } else if (variable === 'initialLength') {
                    label1.textContent = 'Final Length (m):';
                    label2.textContent = 'Temperature Change (K):';
                } else if (variable === 'coefficient') {
                    label1.textContent = 'Initial Length (m):';
                    label2.textContent = 'Final Length (m):';
                } else if (variable === 'tempChange') {
                    label1.textContent = 'Initial Length (m):';
                    label2.textContent = 'Final Length (m):';
                }
            } else if (type === 'entropy') {
                if (variable === 'entropyChange') {
                    label1.textContent = 'Heat Transfer (J):';
                    label2.textContent = 'Temperature (K):';
                } else if (variable === 'heatTransfer') {
                    label1.textContent = 'Entropy Change (J/K):';
                    label2.textContent = 'Temperature (K):';
                } else if (variable === 'temperature') {
                    label1.textContent = 'Entropy Change (J/K):';
                    label2.textContent = 'Heat Transfer (J):';
                }
            }
        } else if (calculatorType === 'electromagnetism-calculator') {
            const type = electromagnetismDropdown.value;
            const variable = variableDropdown.value;

            if (type === 'coulomb') {
                if (variable === 'force') {
                    label1.textContent = 'Charge 1 (C):';
                    label2.textContent = 'Charge 2 (C):';
                    label3.textContent = 'Distance (m):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'charge1') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Charge 2 (C):';
                    label3.textContent = 'Distance (m):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'charge2') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Charge 1 (C):';
                    label3.textContent = 'Distance (m):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Charges product (C²):';
                    label3.textContent = 'Distance (m):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'efield') {
                if (variable === 'field') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Charge (C):';
                } else if (variable === 'force') {
                    label1.textContent = 'Electric Field (N/C):';
                    label2.textContent = 'Charge (C):';
                } else if (variable === 'charge') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Electric Field (N/C):';
                }
            } else if (type === 'ohms') {
                if (variable === 'voltage') {
                    label1.textContent = 'Current (A):';
                    label2.textContent = 'Resistance (Ω):';
                } else if (variable === 'current') {
                    label1.textContent = 'Voltage (V):';
                    label2.textContent = 'Resistance (Ω):';
                } else if (variable === 'resistance') {
                    label1.textContent = 'Voltage (V):';
                    label2.textContent = 'Current (A):';
                }
            } else if (type === 'power') {
                if (variable === 'power') {
                    label1.textContent = 'Voltage (V):';
                    label2.textContent = 'Current (A):';
                } else if (variable === 'voltage') {
                    label1.textContent = 'Power (W):';
                    label2.textContent = 'Current (A):';
                } else if (variable === 'current') {
                    label1.textContent = 'Power (W):';
                    label2.textContent = 'Voltage (V):';
                } else if (variable === 'resistance') {
                    label1.textContent = 'Power (W):';
                    label2.textContent = 'Current (A):';
                }
            } else if (type === 'capacitance') {
                if (variable === 'capacitance') {
                    label1.textContent = 'Charge (C):';
                    label2.textContent = 'Voltage (V):';
                } else if (variable === 'charge') {
                    label1.textContent = 'Capacitance (F):';
                    label2.textContent = 'Voltage (V):';
                } else if (variable === 'voltage') {
                    label1.textContent = 'Charge (C):';
                    label2.textContent = 'Capacitance (F):';
                }
            } else if (type === 'magneticField') {
                if (variable === 'field') {
                    label1.textContent = 'Current (A):';
                    label2.textContent = 'Distance (m):';
                } else if (variable === 'current') {
                    label1.textContent = 'Magnetic Field (T):';
                    label2.textContent = 'Distance (m):';
                } else if (variable === 'distance') {
                    label1.textContent = 'Magnetic Field (T):';
                    label2.textContent = 'Current (A):';
                }
            }
        }

        // Show labels and inputs if a variable is selected
        if (
            (calculatorType === 'mechanics-calculator' ||
                calculatorType === 'thermodynamics-calculator' ||
                calculatorType === 'electromagnetism-calculator') &&
            variableDropdown.value
        ) {
            label1.style.display = '';
            label2.style.display = '';
            input1.style.display = '';
            input2.style.display = '';
        }
    }
    
    // Handle form submission
    form.addEventListener('submit', function (e)) {
        e.preventDefault();
        console.log('Form submitted'); // Debugging

        const val1 = parseFloat(input1.value);
        const val2 = parseFloat(input2.value);
        const val3 = parseFloat(input3.value);
        let result = '';

        // Get calculator type
        const calculatorType = calculators.value;

        if (calculatorType === 'mechanics-calculator') {
            const type = mechanicsDropdown.value;
            const variable = variableDropdown.value;

            console.log(
                'Type:',
                type,
                'Variable:',
                variable,
                'Value1:',
                val1,
                'Value2:',
                val2
            ); // Debugging

            if (type === 'speed') {
                if (variable === 'speed') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Speed = ${(val1 / val2).toFixed(2)} m/s`;
                    } else {
                        result = 'Please enter valid numbers (time ≠ 0).';
                    }
                } else if (variable === 'distance') {
                    if (!isNaN(val1) && !isNaN(val2)) {
                        result = `Distance = ${(val1 * val2).toFixed(2)} meters`;
                    } else {
                        result = 'Please enter valid numbers.';
                    }
                } else if (variable === 'time') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Time = ${(val1 / val2).toFixed(2)} seconds`;
                    } else {
                        result = 'Please enter valid numbers (speed ≠ 0).';
                    }
                }
            } else if (type === 'force') {
                if (variable === 'force') {
                    if (!isNaN(val1) && !isNaN(val2)) {
                        result = `Force = ${(val1 * val2).toFixed(2)} N`;
                    } else {
                        result = 'Please enter valid numbers.';
                    }
                } else if (variable === 'mass') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Mass = ${(val1 / val2).toFixed(2)} kg`;
                    } else {
                        result = 'Please enter valid numbers (acceleration ≠ 0).';
                    }
                } else if (variable === 'acceleration') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Acceleration = ${(val1 / val2).toFixed(2)} m/s²`;
                    } else {
                        result = 'Please enter valid numbers (mass ≠ 0).';
                    }
                }
            } else if (type === 'work') {
                if (variable === 'work') {
                    if (!isNaN(val1) && !isNaN(val2)) {
                        result = `Work = ${(val1 * val2).toFixed(2)} J`;
                    } else {
                        result = 'Please enter valid numbers.';
                    }
                } else if (variable === 'force') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Force = ${(val1 / val2).toFixed(2)} N`;
                    } else {
                        result = 'Please enter valid numbers (distance ≠ 0).';
                    }
                } else if (variable === 'distance') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Distance = ${(val1 / val2).toFixed(2)} meters`;
                    } else {
                        result = 'Please enter valid numbers (force ≠ 0).';
                    }
                }
            } else if (type === 'kinetic') {
                if (variable === 'ke') {
                    if (!isNaN(val1) && !isNaN(val2)) {
                        result = `Kinetic Energy = ${(
                            0.5 *
                            val1 *
                            val2 *
                            val2
                        ).toFixed(2)} J`;
                    } else {
                        result = 'Please enter valid numbers.';
                    }
                } else if (variable === 'mass') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Mass = ${(val1 / (0.5 * val2 * val2)).toFixed(
                            2
                        )} kg`;
                    } else {
                        result = 'Please enter valid numbers (velocity ≠ 0).';
                    }
                } else if (variable === 'velocity') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Velocity = ${Math.sqrt(val1 / (0.5 * val2)).toFixed(
                            2
                        )} m/s`;
                    } else {
                        result = 'Please enter valid numbers (mass ≠ 0).';
                    }
                }
            }
        } else if (calculatorType === 'thermodynamics-calculator') {
            const type = thermodynamicsDropdown.value;
            const variable = variableDropdown.value;

            console.log(
                'Type:',
                type,
                'Variable:',
                variable,
                'Value1:',
                val1,
                'Value2:',
                val2
            ); // Debugging

            // Ideal Gas Constant R (J/(mol·K))
            const R = 8.314;

            if (type === 'idealGas') {
                if (variable === 'pressure') {
                    if (!isNaN(val1) && !isNaN(val2) && val1 !== 0 && val2 !== 0) {
                        // P = nRT/V (using V = 1 for simplicity)
                        result = `Pressure = ${((val1 * R * val2) / 1).toFixed(
                            2
                        )} Pa`;
                    } else {
                        result = 'Please enter valid numbers (n, T ≠ 0).';
                    }
                } else if (variable === 'volume') {
                    if (!isNaN(val1) && !isNaN(val2) && val1 !== 0 && val2 !== 0) {
                        // V = nRT/P (using P = 1 for simplicity)
                        result = `Volume = ${((val1 * Rdocument.addEventListener('DOMContentLoaded', function () {
    // Initialize particle.js
    particlesJS('particles-js', {
        particles: {
            number: { value: 60 },
            color: { value: '#7ecfff' },
            shape: { type: 'circle' },
            opacity: { value: 0.3 },
            size: { value: 4 },
            move: { enable: true, speed: 1.5 },
        },
    });

    // Get all form elements
    const calculators = document.getElementById('calculators');
    const mechanicsDropdown = document.getElementById('mechanics-dropdown');
    const thermodynamicsDropdown = document.getElementById(
        'thermodynamics-dropdown'
    );
    const electromagnetismDropdown = document.getElementById(
        'electromagnetism-dropdown'
    );
    const variableDropdown = document.getElementById('variable-dropdown');
    const form = document.getElementById('calculator-form');
    const input1 = document.getElementById('input1');
    const input2 = document.getElementById('input2');
    const input3 = document.getElementById('input3');
    const label1 = form.querySelector('label[for="input1"]');
    const label2 = form.querySelector('label[for="input2"]');
    const label3 = form.querySelector('label[for="input3"]');
    const resultDiv = document.getElementById('result');

    // Toggle calculator dropdowns
    function toggleCalculatorDropdowns() {
        // Hide all dropdowns first
        mechanicsDropdown.style.display = 'none';
        thermodynamicsDropdown.style.display = 'none';
        electromagnetismDropdown.style.display = 'none';

        // Show the appropriate dropdown
        if (calculators.value === 'mechanics-calculator') {
            mechanicsDropdown.style.display = 'block';
        } else if (calculators.value === 'thermodynamics-calculator') {
            thermodynamicsDropdown.style.display = 'block';
        } else if (calculators.value === 'electromagnetism-calculator') {
            electromagnetismDropdown.style.display = 'block';
        }

        // Update variable dropdown
        updateVariableDropdown();
    }

    // Mechanics calculator types and their variables
    const mechanicsVariables = {
        speed: [
            { value: 'speed', label: 'Speed (v)' },
            { value: 'distance', label: 'Distance (d)' },
            { value: 'time', label: 'Time (t)' },
        ],
        force: [
            { value: 'force', label: 'Force (F)' },
            { value: 'mass', label: 'Mass (m)' },
            { value: 'acceleration', label: 'Acceleration (a)' },
        ],
        work: [
            { value: 'work', label: 'Work (W)' },
            { value: 'force', label: 'Force (F)' },
            { value: 'distance', label: 'Distance (d)' },
        ],
        kinetic: [
            { value: 'ke', label: 'Kinetic Energy (KE)' },
            { value: 'mass', label: 'Mass (m)' },
            { value: 'velocity', label: 'Velocity (v)' },
        ],
    };

    // Thermodynamics calculator types and their variables
    const thermodynamicsVariables = {
        idealGas: [
            { value: 'pressure', label: 'Pressure (P)' },
            { value: 'volume', label: 'Volume (V)' },
            { value: 'moles', label: 'Number of moles (n)' },
            { value: 'temperature', label: 'Temperature (T)' },
        ],
        heatTransfer: [
            { value: 'heat', label: 'Heat (Q)' },
            { value: 'mass', label: 'Mass (m)' },
            { value: 'specificHeat', label: 'Specific Heat (c)' },
            { value: 'tempChange', label: 'Temperature Change (ΔT)' },
        ],
        thermalExpansion: [
            { value: 'finalLength', label: 'Final Length (Lf)' },
            { value: 'initialLength', label: 'Initial Length (Li)' },
            { value: 'coefficient', label: 'Coefficient of Expansion (α)' },
            { value: 'tempChange', label: 'Temperature Change (ΔT)' },
        ],
        entropy: [
            { value: 'entropyChange', label: 'Entropy Change (ΔS)' },
            { value: 'heatTransfer', label: 'Heat Transfer (Q)' },
            { value: 'temperature', label: 'Temperature (T)' },
        ],
    };
    
    // Electromagnetism calculator types and their variables
    const electromagnetismVariables = {
        coulomb: [
            { value: 'force', label: 'Force (F)' },
            { value: 'charge1', label: 'Charge 1 (q₁)' },
            { value: 'charge2', label: 'Charge 2 (q₂)' },
            { value: 'distance', label: 'Distance (r)' },
        ],
        efield: [
            { value: 'field', label: 'Electric Field (E)' },
            { value: 'force', label: 'Force (F)' },
            { value: 'charge', label: 'Charge (q)' },
        ],
        ohms: [
            { value: 'voltage', label: 'Voltage (V)' },
            { value: 'current', label: 'Current (I)' },
            { value: 'resistance', label: 'Resistance (R)' },
        ],
        power: [
            { value: 'power', label: 'Power (P)' },
            { value: 'voltage', label: 'Voltage (V)' },
            { value: 'current', label: 'Current (I)' },
            { value: 'resistance', label: 'Resistance (R)' },
        ],
        capacitance: [
            { value: 'capacitance', label: 'Capacitance (C)' },
            { value: 'charge', label: 'Charge (Q)' },
            { value: 'voltage', label: 'Voltage (V)' },
        ],
        magneticField: [
            { value: 'field', label: 'Magnetic Field (B)' },
            { value: 'current', label: 'Current (I)' },
            { value: 'distance', label: 'Distance (r)' },
        ],
    };

    function updateVariableDropdown() {
        // Clear previous variables
        variableDropdown.innerHTML = '';
        variableDropdown.style.display = 'none';

        if (calculators.value === 'mechanics-calculator') {
            const type = mechanicsDropdown.value;
            if (mechanicsVariables[type]) {
                variableDropdown.style.display = 'block';
                mechanicsVariables[type].forEach((opt) => {
                    const option = document.createElement('option');
                    option.value = opt.value;
                    option.textContent = opt.label;
                    variableDropdown.appendChild(option);
                });
            }
        } else if (calculators.value === 'thermodynamics-calculator') {
            const type = thermodynamicsDropdown.value;
            if (thermodynamicsVariables[type]) {
                variableDropdown.style.display = 'block';
                thermodynamicsVariables[type].forEach((opt) => {
                    const option = document.createElement('option');
                    option.value = opt.value;
                    option.textContent = opt.label;
                    variableDropdown.appendChild(option);
                });
            }
        } else if (calculators.value === 'electromagnetism-calculator') {
            const type = electromagnetismDropdown.value;
            if (electromagnetismVariables[type]) {
                variableDropdown.style.display = 'block';
                electromagnetismVariables[type].forEach((opt) => {
                    const option = document.createElement('option');
                    option.value = opt.value;
                    option.textContent = opt.label;
                    variableDropdown.appendChild(option);
                });
            }
        }

        // Update calculator form
        updateCalculatorForm();
    }

    function calculateElectromagnetismResult(val1, val2, val3) {
        const type = electromagnetismDropdown.value;
        const variable = variableDropdown.value;
        let result = '';

        // Coulomb constant (N·m²/C²)
        const k = 8.99e9;
        // Magnetic constant μ₀ (T·m/A)
        const mu0 = 4 * Math.PI * 1e-7;

        if (type === 'coulomb') {
            if (variable === 'force') {
                if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3) && val3 !== 0) {
                    result = `Force = ${((k * val1 * val2) / (val3 * val3)).toExponential(
                        2
                    )} N`;
                } else {
                    result = 'Please enter valid numbers (r ≠ 0).';
                }
            } else if (variable === 'charge1') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0 && !isNaN(val3) && val3 !== 0) {
                    result = `Charge 1 = ${(
                        (val1 * val3 * val3) /
                        (k * val2)
                    ).toExponential(2)} C`;
                } else {
                    result = 'Please enter valid numbers (q₂, r ≠ 0).';
                }
            } else if (variable === 'charge2') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0 && !isNaN(val3) && val3 !== 0) {
                    result = `Charge 2 = ${(
                        (val1 * val3 * val3) /
                        (k * val2)
                    ).toExponential(2)} C`;
                } else {
                    result = 'Please enter valid numbers (q₁, r ≠ 0).';
                }
            } else if (variable === 'distance') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0 && val1 !== 0) {
                    result = `Distance = ${Math.sqrt((k * val2) / val1).toFixed(
                        2
                    )} m`;
                } else {
                    result = 'Please enter valid numbers (F, q₁·q₂ ≠ 0).';
                }
            }
        } else if (type === 'efield') {
            if (variable === 'field') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Electric Field = ${(val1 / val2).toFixed(2)} N/C`;
                } else {
                    result = 'Please enter valid numbers (q ≠ 0).';
                }
            } else if (variable === 'force') {
                if (!isNaN(val1) && !isNaN(val2)) {
                    result = `Force = ${(val1 * val2).toFixed(2)} N`;
                } else {
                    result = 'Please enter valid numbers.';
                }
            } else if (variable === 'charge') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Charge = ${(val1 / val2).toExponential(2)} C`;
                } else {
                    result = 'Please enter valid numbers (E ≠ 0).';
                }
            }
        } else if (type === 'ohms') {
            if (variable === 'voltage') {
                if (!isNaN(val1) && !isNaN(val2)) {
                    result = `Voltage = ${(val1 * val2).toFixed(2)} V`;
                } else {
                    result = 'Please enter valid numbers.';
                }
            } else if (variable === 'current') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Current = ${(val1 / val2).toFixed(2)} A`;
                } else {
                    result = 'Please enter valid numbers (R ≠ 0).';
                }
            } else if (variable === 'resistance') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Resistance = ${(val1 / val2).toFixed(2)} Ω`;
                } else {
                    result = 'Please enter valid numbers (I ≠ 0).';
                }
            }
        } else if (type === 'power') {
            if (variable === 'power') {
                if (!isNaN(val1) && !isNaN(val2)) {
                    result = `Power = ${(val1 * val2).toFixed(2)} W`;
                } else {
                    result = 'Please enter valid numbers.';
                }
            } else if (variable === 'voltage') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Voltage = ${(val1 / val2).toFixed(2)} V`;
                } else {
                    result = 'Please enter valid numbers (I ≠ 0).';
                }
            } else if (variable === 'current') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Current = ${(val1 / val2).toFixed(2)} A`;
                } else {
                    result = 'Please enter valid numbers (V ≠ 0).';
                }
            } else if (variable === 'resistance') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Resistance = ${(val1 / (val2 * val2)).toFixed(2)} Ω`;
                } else {
                    result = 'Please enter valid numbers (I ≠ 0).';
                }
            }
        } else if (type === 'capacitance') {
            if (variable === 'capacitance') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Capacitance = ${(val1 / val2).toExponential(2)} F`;
                } else {
                    result = 'Please enter valid numbers (V ≠ 0).';
                }
            } else if (variable === 'charge') {
                if (!isNaN(val1) && !isNaN(val2)) {
                    result = `Charge = ${(val1 * val2).toExponential(2)} C`;
                } else {
                    result = 'Please enter valid numbers.';
                }
            } else if (variable === 'voltage') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Voltage = ${(val1 / val2).toFixed(2)} V`;
                } else {
                    result = 'Please enter valid numbers (C ≠ 0).';
                }
            }
        } else if (type === 'magneticField') {
            if (variable === 'field') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Magnetic Field = ${(
                        (mu0 * val1) /
                        (2 * Math.PI * val2)
                    ).toExponential(2)} T`;
                } else {
                    result = 'Please enter valid numbers (r ≠ 0).';
                }
            } else if (variable === 'current') {
                if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                    result = `Current = ${(
                        (2 * Math.PI * val2 * val1) /
                        mu0
                    ).toFixed(2)} A`;
                } else {
                    result = 'Please enter valid numbers (r ≠ 0).';
                }
            } else if (variable === 'distance') {
                if (!isNaN(val1) && !isNaN(val2) && val1 !== 0 && val2 !== 0) {
                    result = `Distance = ${(
                        (mu0 * val2) /
                        (2 * Math.PI * val1)
                    ).toFixed(2)} m`;
                } else {
                    result = 'Please enter valid numbers (B, I ≠ 0).';
                }
            }
        }

        return result;
    }

    function updateCalculatorForm() {
        // Clear previous inputs
        input1.value = '';
        input2.value = '';
        input3.value = '';
        resultDiv.textContent = '';

        // Default: hide all
        label1.style.display = 'none';
        label2.style.display = 'none';
        label3.style.display = 'none';
        input1.style.display = 'none';
        input2.style.display = 'none';
        input3.style.display = 'none';

        // Get calculator type
        const calculatorType = calculators.value;
        document
            .querySelector('.calculator-container')
            .setAttribute('data-active-calculator', calculatorType);

        if (calculatorType === 'mechanics-calculator') {
            const type = mechanicsDropdown.value;
            const variable = variableDropdown.value;

            if (type === 'speed') {
                if (variable === 'speed' || variable === '') {
                    label1.textContent = 'Distance (meters):';
                    label2.textContent = 'Time (seconds):';
                } else if (variable === 'distance') {
                    label1.textContent = 'Speed (m/s):';
                    label2.textContent = 'Time (seconds):';
                } else if (variable === 'time') {
                    label1.textContent = 'Distance (meters):';
                    label2.textContent = 'Speed (m/s):';
                }
            } else if (type === 'force') {
                if (variable === 'force' || variable === '') {
                    label1.textContent = 'Mass (kg):';
                    label2.textContent = 'Acceleration (m/s²):';
                } else if (variable === 'mass') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Acceleration (m/s²):';
                } else if (variable === 'acceleration') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Mass (kg):';
                }
            } else if (type === 'work') {
                if (variable === 'work' || variable === '') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Distance (meters):';
                } else if (variable === 'force') {
                    label1.textContent = 'Work (J):';
                    label2.textContent = 'Distance (meters):';
                } else if (variable === 'distance') {
                    label1.textContent = 'Work (J):';
                    label2.textContent = 'Force (N):';
                }
            } else if (type === 'kinetic') {
                if (variable === 'ke' || variable === '') {
                    label1.textContent = 'Mass (kg):';
                    label2.textContent = 'Velocity (m/s):';
                } else if (variable === 'mass') {
                    label1.textContent = 'Kinetic Energy (J):';
                    label2.textContent = 'Velocity (m/s):';
                } else if (variable === 'velocity') {
                    label1.textContent = 'Kinetic Energy (J):';
                    label2.textContent = 'Mass (kg):';
                }
            }
        } else if (calculatorType === 'thermodynamics-calculator') {
            const type = thermodynamicsDropdown.value;
            const variable = variableDropdown.value;

            if (type === 'idealGas') {
                if (variable === 'pressure') {
                    label1.textContent = 'Number of moles (n):';
                    label2.textContent = 'Temperature (K):';
                    label3.textContent = 'Volume (m³):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'volume') {
                    label1.textContent = 'Number of moles (n):';
                    label2.textContent = 'Temperature (K):';
                    label3.textContent = 'Pressure (Pa):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'moles') {
                    label1.textContent = 'Pressure (Pa):';
                    label2.textContent = 'Volume (m³):';
                    label3.textContent = 'Temperature (K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'temperature') {
                    label1.textContent = 'Pressure (Pa):';
                    label2.textContent = 'Volume (m³):';
                    label3.textContent = 'Number of moles (n):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'heatTransfer') {
                if (variable === 'heat') {
                    label1.textContent = 'Mass (kg):';
                    label2.textContent = 'Specific Heat (J/kg·K):';
                    label3.textContent = 'Temperature Change (K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'mass') {
                    label1.textContent = 'Heat (J):';
                    label2.textContent = 'Temperature Change (K):';
                    label3.textContent = 'Specific Heat (J/kg·K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'specificHeat') {
                    label1.textContent = 'Heat (J):';
                    label2.textContent = 'Mass (kg):';
                    label3.textContent = 'Temperature Change (K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'tempChange') {
                    label1.textContent = 'Heat (J):';
                    label2.textContent = 'Mass (kg):';
                    label3.textContent = 'Specific Heat (J/kg·K):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'thermalExpansion') {
                if (variable === 'finalLength') {
                    label1.textContent = 'Initial Length (m):';
                    label2.textContent = 'Temperature Change (K):';
                } else if (variable === 'initialLength') {
                    label1.textContent = 'Final Length (m):';
                    label2.textContent = 'Temperature Change (K):';
                } else if (variable === 'coefficient') {
                    label1.textContent = 'Initial Length (m):';
                    label2.textContent = 'Final Length (m):';
                } else if (variable === 'tempChange') {
                    label1.textContent = 'Initial Length (m):';
                    label2.textContent = 'Final Length (m):';
                }
            } else if (type === 'entropy') {
                if (variable === 'entropyChange') {
                    label1.textContent = 'Heat Transfer (J):';
                    label2.textContent = 'Temperature (K):';
                } else if (variable === 'heatTransfer') {
                    label1.textContent = 'Entropy Change (J/K):';
                    label2.textContent = 'Temperature (K):';
                } else if (variable === 'temperature') {
                    label1.textContent = 'Entropy Change (J/K):';
                    label2.textContent = 'Heat Transfer (J):';
                }
            }
        } else if (calculatorType === 'electromagnetism-calculator') {
            const type = electromagnetismDropdown.value;
            const variable = variableDropdown.value;

            if (type === 'coulomb') {
                if (variable === 'force') {
                    label1.textContent = 'Charge 1 (C):';
                    label2.textContent = 'Charge 2 (C):';
                    label3.textContent = 'Distance (m):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'charge1') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Charge 2 (C):';
                    label3.textContent = 'Distance (m):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'charge2') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Charge 1 (C):';
                    label3.textContent = 'Distance (m):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                } else if (variable === 'distance') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Charges product (C²):';
                    label3.textContent = 'Distance (m):';
                    label3.style.display = 'block';
                    input3.style.display = 'block';
                }
            } else if (type === 'efield') {
                if (variable === 'field') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Charge (C):';
                } else if (variable === 'force') {
                    label1.textContent = 'Electric Field (N/C):';
                    label2.textContent = 'Charge (C):';
                } else if (variable === 'charge') {
                    label1.textContent = 'Force (N):';
                    label2.textContent = 'Electric Field (N/C):';
                }
            } else if (type === 'ohms') {
                if (variable === 'voltage') {
                    label1.textContent = 'Current (A):';
                    label2.textContent = 'Resistance (Ω):';
                } else if (variable === 'current') {
                    label1.textContent = 'Voltage (V):';
                    label2.textContent = 'Resistance (Ω):';
                } else if (variable === 'resistance') {
                    label1.textContent = 'Voltage (V):';
                    label2.textContent = 'Current (A):';
                }
            } else if (type === 'power') {
                if (variable === 'power') {
                    label1.textContent = 'Voltage (V):';
                    label2.textContent = 'Current (A):';
                } else if (variable === 'voltage') {
                    label1.textContent = 'Power (W):';
                    label2.textContent = 'Current (A):';
                } else if (variable === 'current') {
                    label1.textContent = 'Power (W):';
                    label2.textContent = 'Voltage (V):';
                } else if (variable === 'resistance') {
                    label1.textContent = 'Power (W):';
                    label2.textContent = 'Current (A):';
                }
            } else if (type === 'capacitance') {
                if (variable === 'capacitance') {
                    label1.textContent = 'Charge (C):';
                    label2.textContent = 'Voltage (V):';
                } else if (variable === 'charge') {
                    label1.textContent = 'Capacitance (F):';
                    label2.textContent = 'Voltage (V):';
                } else if (variable === 'voltage') {
                    label1.textContent = 'Charge (C):';
                    label2.textContent = 'Capacitance (F):';
                }
            } else if (type === 'magneticField') {
                if (variable === 'field') {
                    label1.textContent = 'Current (A):';
                    label2.textContent = 'Distance (m):';
                } else if (variable === 'current') {
                    label1.textContent = 'Magnetic Field (T):';
                    label2.textContent = 'Distance (m):';
                } else if (variable === 'distance') {
                    label1.textContent = 'Magnetic Field (T):';
                    label2.textContent = 'Current (A):';
                }
            }
        }

        // Show labels and inputs if a variable is selected
        if (
            (calculatorType === 'mechanics-calculator' ||
                calculatorType === 'thermodynamics-calculator' ||
                calculatorType === 'electromagnetism-calculator') &&
            variableDropdown.value
        ) {
            label1.style.display = '';
            label2.style.display = '';
            input1.style.display = '';
            input2.style.display = '';
        }
    }
    
    // Handle form submission
    form.addEventListener('submit', function (e) {
        e.preventDefault();
        console.log('Form submitted'); // Debugging

        const val1 = parseFloat(input1.value);
        const val2 = parseFloat(input2.value);
        const val3 = parseFloat(input3.value);
        let result = '';

        // Get calculator type
        const calculatorType = calculators.value;

        if (calculatorType === 'mechanics-calculator') {
            const type = mechanicsDropdown.value;
            const variable = variableDropdown.value;

            console.log(
                'Type:',
                type,
                'Variable:',
                variable,
                'Value1:',
                val1,
                'Value2:',
                val2
            ); // Debugging

            if (type === 'speed') {
                if (variable === 'speed') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Speed = ${(val1 / val2).toFixed(2)} m/s`;
                    } else {
                        result = 'Please enter valid numbers (time ≠ 0).';
                    }
                } else if (variable === 'distance') {
                    if (!isNaN(val1) && !isNaN(val2)) {
                        result = `Distance = ${(val1 * val2).toFixed(2)} meters`;
                    } else {
                        result = 'Please enter valid numbers.';
                    }
                } else if (variable === 'time') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Time = ${(val1 / val2).toFixed(2)} seconds`;
                    } else {
                        result = 'Please enter valid numbers (speed ≠ 0).';
                    }
                }
            } else if (type === 'force') {
                if (variable === 'force') {
                    if (!isNaN(val1) && !isNaN(val2)) {
                        result = `Force = ${(val1 * val2).toFixed(2)} N`;
                    } else {
                        result = 'Please enter valid numbers.';
                    }
                } else if (variable === 'mass') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Mass = ${(val1 / val2).toFixed(2)} kg`;
                    } else {
                        result = 'Please enter valid numbers (acceleration ≠ 0).';
                    }
                } else if (variable === 'acceleration') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Acceleration = ${(val1 / val2).toFixed(2)} m/s²`;
                    } else {
                        result = 'Please enter valid numbers (mass ≠ 0).';
                    }
                }
            } else if (type === 'work') {
                if (variable === 'work') {
                    if (!isNaN(val1) && !isNaN(val2)) {
                        result = `Work = ${(val1 * val2).toFixed(2)} J`;
                    } else {
                        result = 'Please enter valid numbers.';
                    }
                } else if (variable === 'force') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Force = ${(val1 / val2).toFixed(2)} N`;
                    } else {
                        result = 'Please enter valid numbers (distance ≠ 0).';
                    }
                } else if (variable === 'distance') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Distance = ${(val1 / val2).toFixed(2)} meters`;
                    } else {
                        result = 'Please enter valid numbers (force ≠ 0).';
                    }
                }
            } else if (type === 'kinetic') {
                if (variable === 'ke') {
                    if (!isNaN(val1) && !isNaN(val2)) {
                        result = `Kinetic Energy = ${(
                            0.5 *
                            val1 *
                            val2 *
                            val2
                        ).toFixed(2)} J`;
                    } else {
                        result = 'Please enter valid numbers.';
                    }
                } else if (variable === 'mass') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Mass = ${(val1 / (0.5 * val2 * val2)).toFixed(
                            2
                        )} kg`;
                    } else {
                        result = 'Please enter valid numbers (velocity ≠ 0).';
                    }
                } else if (variable === 'velocity') {
                    if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                        result = `Velocity = ${Math.sqrt(val1 / (0.5 * val2)).toFixed(
                            2
                        )} m/s`;
                    } else {
                        result = 'Please enter valid numbers (mass ≠ 0).';
                    }
                }
            }
        }   // Form submission handler code (continued)
            else if (calculatorType === 'thermodynamics-calculator') {
                const type = thermodynamicsDropdown.value;
                const variable = variableDropdown.value;
                const R = 8.314; // Ideal Gas Constant
        
                if (type === 'idealGas') {
                    if (variable === 'pressure') {
                        if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3) && val1 !== 0 && val2 !== 0 && val3 !== 0) {
                            // P = nRT/V
                            result = `Pressure = ${((val1 * R * val2) / val3).toFixed(2)} Pa`;
                        } else {
                            result = 'Please enter valid numbers (n, T, V ≠ 0).';
                        }
                    } else if (variable === 'volume') {
                        if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3) && val1 !== 0 && val2 !== 0 && val3 !== 0) {
                            // V = nRT/P
                            result = `Volume = ${((val1 * R * val2) / val3).toFixed(2)} m³`;
                        } else {
                            result = 'Please enter valid numbers (n, T, P ≠ 0).';
                        }
                    } else if (variable === 'moles') {
                        if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3) && val1 !== 0 && val2 !== 0 && val3 !== 0) {
                            // n = PV/RT
                            result = `Number of moles = ${((val1 * val2) / (R * val3)).toFixed(2)} mol`;
                        } else {
                            result = 'Please enter valid numbers (P, V, T ≠ 0).';
                        }
                    } else if (variable === 'temperature') {
                        if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3) && val1 !== 0 && val2 !== 0 && val3 !== 0) {
                            // T = PV/nR
                            result = `Temperature = ${((val1 * val2) / (val3 * R)).toFixed(2)} K`;
                        } else {
                            result = 'Please enter valid numbers (P, V, n ≠ 0).';
                        }
                    }
                } else if (type === 'heatTransfer') {
                    if (variable === 'heat') {
                        if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3)) {
                            // Q = mcΔT
                            result = `Heat = ${(val1 * val2 * val3).toFixed(2)} J`;
                        } else {
                            result = 'Please enter valid numbers.';
                        }
                    } else if (variable === 'mass') {
                        if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3) && val2 !== 0 && val3 !== 0) {
                            // m = Q/cΔT
                            result = `Mass = ${(val1 / (val3 * val2)).toFixed(2)} kg`;
                        } else {
                            result = 'Please enter valid numbers (c, ΔT ≠ 0).';
                        }
                    } else if (variable === 'specificHeat') {
                        if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3) && val2 !== 0 && val3 !== 0) {
                            // c = Q/mΔT
                            result = `Specific Heat = ${(val1 / (val2 * val3)).toFixed(2)} J/kg·K`;
                        } else {
                            result = 'Please enter valid numbers (m, ΔT ≠ 0).';
                        }
                    } else if (variable === 'tempChange') {
                        if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3) && val2 !== 0 && val3 !== 0) {
                            // ΔT = Q/mc
                            result = `Temperature Change = ${(val1 / (val2 * val3)).toFixed(2)} K`;
                        } else {
                            result = 'Please enter valid numbers (m, c ≠ 0).';
                        }
                    }
                } else if (type === 'thermalExpansion') {
                    // For thermal expansion, usually ΔL = αL₀ΔT
                    const alpha = 1.2e-5; // Linear expansion coefficient (for example, aluminum)
                    
                    if (variable === 'finalLength') {
                        if (!isNaN(val1) && !isNaN(val2)) {
                            result = `Final Length = ${(val1 * (1 + alpha * val2)).toFixed(6)} m`;
                        } else {
                            result = 'Please enter valid numbers.';
                        }
                    } else if (variable === 'initialLength') {
                        if (!isNaN(val1) && !isNaN(val2) && (1 + alpha * val2) !== 0) {
                            result = `Initial Length = ${(val1 / (1 + alpha * val2)).toFixed(6)} m`;
                        } else {
                            result = 'Please enter valid numbers.';
                        }
                    } else if (variable === 'coefficient') {
                        if (!isNaN(val1) && !isNaN(val2) && val1 !== 0 && val2 !== val1) {
                            result = `Coefficient = ${((val2 - val1) / (val1 * val2)).toExponential(2)} K⁻¹`;
                        } else {
                            result = 'Please enter valid numbers (L₀ ≠ 0, L₁ ≠ L₀).';
                        }
                    } else if (variable === 'tempChange') {
                        if (!isNaN(val1) && !isNaN(val2) && val1 !== 0 && alpha !== 0) {
                            result = `Temperature Change = ${((val2 - val1) / (alpha * val1)).toFixed(2)} K`;
                        } else {
                            result = 'Please enter valid numbers (L₀, α ≠ 0).';
                        }
                    }
                } else if (type === 'entropy') {
                    if (variable === 'entropyChange') {
                        if (!isNaN(val1) && !isNaN(val2) && val2 !== 0) {
                            // ΔS = Q/T
                            result = `Entropy Change = ${(val1 / val2).toFixed(2)} J/K`;
                        } else {
                            result = 'Please enter valid numbers (T ≠ 0).';
                        }
                    } else if (variable === 'heatTransfer') {
                        if (!isNaN(val1) && !isNaN(val2)) {
                            // Q = ΔS·T
                            result = `Heat Transfer = ${(val1 * val2).toFixed(2)} J`;
                        } else {
                            result = 'Please enter valid numbers.';
                        }
                    } else if (variable === 'temperature') {
                        if (!isNaN(val1) && !isNaN(val2) && val1 !== 0) {
                            // T = Q/ΔS
                            result = `Temperature = ${(val2 / val1).toFixed(2)} K`;
                        } else {
                            result = 'Please enter valid numbers (ΔS ≠ 0).';
                        }
                    }
                }
            } else if (calculatorType === 'electromagnetism-calculator') {
                result = calculateElectromagnetismResult(val1, val2, val3);
            } else {
                result = 'Please select a calculator.';
            }
        
            console.log('Result:', result); // Debugging
        
            // Display result
            resultDiv.textContent = result;
            resultDiv.style.display = 'block';
            resultDiv.style.opacity = '1';
            resultDiv.style.visibility = 'visible';
        
            // Add a highlight effect
            resultDiv.style.backgroundColor = '#3a3a3a';
            setTimeout(function () {
                resultDiv.style.backgroundColor = '#2d2d2d';
            }, 300);
        
            // Let AOS know there are new elements
            setTimeout(function () {
                if (typeof AOS !== 'undefined') {
                    AOS.refresh();
                }
            }, 500);
        
            return false;
        });
        
        // Add event listeners
        calculators.addEventListener('change', toggleCalculatorDropdowns);
        mechanicsDropdown.addEventListener('change', updateVariableDropdown);
        thermodynamicsDropdown.addEventListener('change', updateVariableDropdown);
        electromagnetismDropdown.addEventListener('change', updateVariableDropdown);
        
        // Initialize the dropdowns
        toggleCalculatorDropdowns();
        updateVariableDropdown();
        
        AOS.init();
        });